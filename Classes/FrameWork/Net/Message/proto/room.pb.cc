// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: room.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "room.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace room {
class RoomInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomInfo> {
} _RoomInfo_default_instance_;
class GetRoomReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetRoomReq> {
} _GetRoomReq_default_instance_;
class GetRoomRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetRoomResp> {
} _GetRoomResp_default_instance_;
class LeaveRoomReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LeaveRoomReq> {
} _LeaveRoomReq_default_instance_;
class LeaveRoomRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LeaveRoomResp> {
} _LeaveRoomResp_default_instance_;
class EnterRoomReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EnterRoomReq> {
} _EnterRoomReq_default_instance_;
class EnterRoomRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EnterRoomResp> {
} _EnterRoomResp_default_instance_;
class GetSeatInfoReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetSeatInfoReq> {
} _GetSeatInfoReq_default_instance_;
class GetSeatInfoRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetSeatInfoResp> {
} _GetSeatInfoResp_default_instance_;
class CreateRoomReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateRoomReq> {
} _CreateRoomReq_default_instance_;
class CreateRoomRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateRoomResp> {
} _CreateRoomResp_default_instance_;
class EnterRoomNtfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EnterRoomNtf> {
} _EnterRoomNtf_default_instance_;
class LeaveRoomNtfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LeaveRoomNtf> {
} _LeaveRoomNtf_default_instance_;
class ReadyReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReadyReq> {
} _ReadyReq_default_instance_;
class ReadyRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReadyResp> {
} _ReadyResp_default_instance_;
class ReadyNtfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReadyNtf> {
} _ReadyNtf_default_instance_;
class GameBeginNtfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameBeginNtf> {
} _GameBeginNtf_default_instance_;
class RestartNtfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RestartNtf> {
} _RestartNtf_default_instance_;
class PutCardNtfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PutCardNtf> {
} _PutCardNtf_default_instance_;
class PutLandlordCardNtfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PutLandlordCardNtf> {
} _PutLandlordCardNtf_default_instance_;
class LandlordNtfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LandlordNtf> {
} _LandlordNtf_default_instance_;
class LandlordReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LandlordReq> {
} _LandlordReq_default_instance_;
class LandlordRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LandlordResp> {
} _LandlordResp_default_instance_;
class PlayReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlayReq> {
} _PlayReq_default_instance_;
class PlayRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlayResp> {
} _PlayResp_default_instance_;
class PlayNtfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlayNtf> {
} _PlayNtf_default_instance_;
class GameOverNtfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameOverNtf> {
} _GameOverNtf_default_instance_;
class LostFromRoomMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LostFromRoomMsg> {
} _LostFromRoomMsg_default_instance_;
class ReconnectReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReconnectReq> {
} _ReconnectReq_default_instance_;
class ReconnectRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReconnectResp> {
} _ReconnectResp_default_instance_;

namespace protobuf_room_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[30];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, state_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomReq, id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomResp, rooms_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomReq, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomReq, rid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomResp, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomReq, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomReq, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomReq, account_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomResp, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomResp, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomResp, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomResp, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomResp, ready_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomResp, otherid_),
  1,
  0,
  2,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSeatInfoReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSeatInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSeatInfoReq, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSeatInfoReq, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSeatInfoReq, find_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSeatInfoResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSeatInfoResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSeatInfoResp, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSeatInfoResp, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSeatInfoResp, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSeatInfoResp, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSeatInfoResp, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSeatInfoResp, ready_),
  2,
  0,
  3,
  4,
  1,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomReq, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomReq, account_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomResp, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomResp, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomResp, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomResp, index_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomNtf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomNtf, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomNtf, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomNtf, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomNtf, ready_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomNtf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomNtf, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomNtf, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveRoomNtf, index_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyReq, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyReq, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyReq, ready_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyResp, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyNtf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyNtf, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyNtf, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyNtf, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyNtf, ready_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameBeginNtf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameBeginNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameBeginNtf, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameBeginNtf, first_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestartNtf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestartNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestartNtf, first_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutCardNtf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutCardNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutCardNtf, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutCardNtf, cid_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutLandlordCardNtf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutLandlordCardNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutLandlordCardNtf, landlord_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutLandlordCardNtf, cid_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandlordNtf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandlordNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandlordNtf, cindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandlordNtf, nindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandlordNtf, call_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandlordNtf, ctype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandlordNtf, ntype_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandlordReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandlordReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandlordReq, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandlordReq, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandlordReq, call_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandlordResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandlordResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandlordResp, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayReq, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayReq, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayReq, cid_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayResp, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayResp, next_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayNtf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayNtf, current_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayNtf, next_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayNtf, cid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayNtf, multiple_),
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverNtf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverNtf, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverNtf, winner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverNtf, landlord_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverNtf, multiple_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostFromRoomMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostFromRoomMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostFromRoomMsg, rid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectReq, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectReq, uid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectResp, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectResp, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectResp, current_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectResp, landlord_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectResp, otherid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectResp, cid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectResp, state_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  4,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(RoomInfo)},
  { 13, 19, sizeof(GetRoomReq)},
  { 20, 26, sizeof(GetRoomResp)},
  { 27, 34, sizeof(LeaveRoomReq)},
  { 36, 42, sizeof(LeaveRoomResp)},
  { 43, 51, sizeof(EnterRoomReq)},
  { 54, 65, sizeof(EnterRoomResp)},
  { 71, 79, sizeof(GetSeatInfoReq)},
  { 82, 93, sizeof(GetSeatInfoResp)},
  { 99, 106, sizeof(CreateRoomReq)},
  { 108, 117, sizeof(CreateRoomResp)},
  { 121, 130, sizeof(EnterRoomNtf)},
  { 134, 142, sizeof(LeaveRoomNtf)},
  { 145, 153, sizeof(ReadyReq)},
  { 156, 162, sizeof(ReadyResp)},
  { 163, 172, sizeof(ReadyNtf)},
  { 176, 183, sizeof(GameBeginNtf)},
  { 185, 191, sizeof(RestartNtf)},
  { 192, 199, sizeof(PutCardNtf)},
  { 201, 208, sizeof(PutLandlordCardNtf)},
  { 210, 220, sizeof(LandlordNtf)},
  { 225, 233, sizeof(LandlordReq)},
  { 236, 242, sizeof(LandlordResp)},
  { 243, 251, sizeof(PlayReq)},
  { 254, 261, sizeof(PlayResp)},
  { 263, 272, sizeof(PlayNtf)},
  { 276, 285, sizeof(GameOverNtf)},
  { 289, 295, sizeof(LostFromRoomMsg)},
  { 296, 303, sizeof(ReconnectReq)},
  { 305, 317, sizeof(ReconnectResp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetRoomResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LeaveRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LeaveRoomResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EnterRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EnterRoomResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetSeatInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetSeatInfoResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateRoomResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EnterRoomNtf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LeaveRoomNtf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReadyReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReadyResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReadyNtf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameBeginNtf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RestartNtf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PutCardNtf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PutLandlordCardNtf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LandlordNtf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LandlordReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LandlordResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayNtf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameOverNtf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LostFromRoomMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReconnectReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReconnectResp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "room.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 30);
}

}  // namespace

void TableStruct::Shutdown() {
  _RoomInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _GetRoomReq_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _GetRoomResp_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _LeaveRoomReq_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _LeaveRoomResp_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _EnterRoomReq_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _EnterRoomResp_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _GetSeatInfoReq_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _GetSeatInfoResp_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CreateRoomReq_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CreateRoomResp_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _EnterRoomNtf_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _LeaveRoomNtf_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _ReadyReq_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _ReadyResp_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _ReadyNtf_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _GameBeginNtf_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _RestartNtf_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _PutCardNtf_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _PutLandlordCardNtf_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _LandlordNtf_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _LandlordReq_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _LandlordResp_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _PlayReq_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _PlayResp_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _PlayNtf_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _GameOverNtf_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _LostFromRoomMsg_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _ReconnectReq_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _ReconnectResp_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::base::protobuf_base_2eproto::InitDefaults();
  _RoomInfo_default_instance_.DefaultConstruct();
  _GetRoomReq_default_instance_.DefaultConstruct();
  _GetRoomResp_default_instance_.DefaultConstruct();
  _LeaveRoomReq_default_instance_.DefaultConstruct();
  _LeaveRoomResp_default_instance_.DefaultConstruct();
  _EnterRoomReq_default_instance_.DefaultConstruct();
  _EnterRoomResp_default_instance_.DefaultConstruct();
  _GetSeatInfoReq_default_instance_.DefaultConstruct();
  _GetSeatInfoResp_default_instance_.DefaultConstruct();
  _CreateRoomReq_default_instance_.DefaultConstruct();
  _CreateRoomResp_default_instance_.DefaultConstruct();
  _EnterRoomNtf_default_instance_.DefaultConstruct();
  _LeaveRoomNtf_default_instance_.DefaultConstruct();
  _ReadyReq_default_instance_.DefaultConstruct();
  _ReadyResp_default_instance_.DefaultConstruct();
  _ReadyNtf_default_instance_.DefaultConstruct();
  _GameBeginNtf_default_instance_.DefaultConstruct();
  _RestartNtf_default_instance_.DefaultConstruct();
  _PutCardNtf_default_instance_.DefaultConstruct();
  _PutLandlordCardNtf_default_instance_.DefaultConstruct();
  _LandlordNtf_default_instance_.DefaultConstruct();
  _LandlordReq_default_instance_.DefaultConstruct();
  _LandlordResp_default_instance_.DefaultConstruct();
  _PlayReq_default_instance_.DefaultConstruct();
  _PlayResp_default_instance_.DefaultConstruct();
  _PlayNtf_default_instance_.DefaultConstruct();
  _GameOverNtf_default_instance_.DefaultConstruct();
  _LostFromRoomMsg_default_instance_.DefaultConstruct();
  _ReconnectReq_default_instance_.DefaultConstruct();
  _ReconnectResp_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\nroom.proto\022\004room\032\nbase.proto\"~\n\010RoomIn"
      "fo\022\n\n\002id\030\001 \002(\r\022\014\n\004name\030\002 \002(\014\022\r\n\005count\030\003 "
      "\002(\r\022\'\n\005state\030\004 \002(\0162\030.room.RoomInfo.RoomS"
      "tate\" \n\tRoomState\022\010\n\004WAIT\020\000\022\t\n\005START\020\001\"\030"
      "\n\nGetRoomReq\022\n\n\002id\030\001 \002(\r\",\n\013GetRoomResp\022"
      "\035\n\005rooms\030\001 \003(\0132\016.room.RoomInfo\"(\n\014LeaveR"
      "oomReq\022\013\n\003uid\030\001 \002(\r\022\013\n\003rid\030\002 \002(\r\"1\n\rLeav"
      "eRoomResp\022 \n\006result\030\001 \002(\0162\020.base.ERROR_C"
      "ODE\"9\n\014EnterRoomReq\022\013\n\003uid\030\001 \002(\r\022\013\n\003rid\030"
      "\002 \002(\r\022\017\n\007account\030\003 \002(\014\"{\n\rEnterRoomResp\022"
      " \n\006result\030\001 \002(\0162\020.base.ERROR_CODE\022\014\n\004des"
      "c\030\002 \001(\014\022\013\n\003rid\030\003 \001(\r\022\r\n\005index\030\004 \001(\r\022\r\n\005r"
      "eady\030\005 \001(\010\022\017\n\007otherid\030\006 \003(\r\"8\n\016GetSeatIn"
      "foReq\022\013\n\003uid\030\001 \002(\r\022\013\n\003rid\030\002 \002(\r\022\014\n\004find\030"
      "\003 \002(\r\"}\n\017GetSeatInfoResp\022 \n\006result\030\001 \002(\016"
      "2\020.base.ERROR_CODE\022\014\n\004desc\030\002 \001(\014\022\013\n\003uid\030"
      "\003 \002(\r\022\r\n\005index\030\004 \002(\r\022\017\n\007account\030\005 \002(\014\022\r\n"
      "\005ready\030\006 \002(\010\",\n\rCreateRoomReq\022\n\n\002id\030\001 \002("
      "\r\022\017\n\007account\030\002 \002(\014\"\\\n\016CreateRoomResp\022 \n\006"
      "result\030\001 \002(\0162\020.base.ERROR_CODE\022\014\n\004desc\030\002"
      " \001(\014\022\013\n\003rid\030\003 \001(\r\022\r\n\005index\030\004 \001(\r\"F\n\014Ente"
      "rRoomNtf\022\013\n\003rid\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\022\r\n\005in"
      "dex\030\003 \002(\r\022\r\n\005ready\030\005 \002(\010\"7\n\014LeaveRoomNtf"
      "\022\013\n\003rid\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\022\r\n\005index\030\003 \002("
      "\r\"3\n\010ReadyReq\022\013\n\003uid\030\001 \002(\r\022\013\n\003rid\030\002 \002(\r\022"
      "\r\n\005ready\030\003 \002(\010\"-\n\tReadyResp\022 \n\006result\030\001 "
      "\002(\0162\020.base.ERROR_CODE\"B\n\010ReadyNtf\022\013\n\003uid"
      "\030\001 \002(\r\022\013\n\003rid\030\002 \002(\r\022\r\n\005index\030\003 \002(\r\022\r\n\005re"
      "ady\030\004 \002(\010\"*\n\014GameBeginNtf\022\013\n\003rid\030\001 \002(\r\022\r"
      "\n\005first\030\002 \002(\r\"\033\n\nRestartNtf\022\r\n\005first\030\001 \002"
      "(\r\"&\n\nPutCardNtf\022\013\n\003uid\030\001 \002(\r\022\013\n\003cid\030\002 \003"
      "(\r\"3\n\022PutLandlordCardNtf\022\020\n\010landlord\030\001 \002"
      "(\r\022\013\n\003cid\030\002 \003(\r\"Y\n\013LandlordNtf\022\016\n\006cindex"
      "\030\001 \002(\r\022\016\n\006nindex\030\002 \002(\r\022\014\n\004call\030\003 \002(\010\022\r\n\005"
      "ctype\030\004 \002(\010\022\r\n\005ntype\030\005 \002(\010\"5\n\013LandlordRe"
      "q\022\013\n\003uid\030\001 \002(\r\022\013\n\003rid\030\002 \002(\r\022\014\n\004call\030\003 \002("
      "\010\"0\n\014LandlordResp\022 \n\006result\030\001 \002(\0162\020.base"
      ".ERROR_CODE\"0\n\007PlayReq\022\013\n\003uid\030\001 \002(\r\022\013\n\003r"
      "id\030\002 \002(\r\022\013\n\003cid\030\003 \003(\r\":\n\010PlayResp\022 \n\006res"
      "ult\030\001 \002(\0162\020.base.ERROR_CODE\022\014\n\004next\030\002 \001("
      "\r\"G\n\007PlayNtf\022\017\n\007current\030\001 \002(\r\022\014\n\004next\030\002 "
      "\002(\r\022\013\n\003cid\030\003 \003(\r\022\020\n\010multiple\030\004 \002(\r\"N\n\013Ga"
      "meOverNtf\022\013\n\003rid\030\001 \002(\r\022\016\n\006winner\030\002 \002(\r\022\020"
      "\n\010landlord\030\003 \002(\r\022\020\n\010multiple\030\004 \002(\r\"\036\n\017Lo"
      "stFromRoomMsg\022\013\n\003rid\030\001 \002(\r\"(\n\014ReconnectR"
      "eq\022\013\n\003rid\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\"\332\001\n\rReconne"
      "ctResp\022 \n\006result\030\001 \002(\0162\020.base.ERROR_CODE"
      "\022\r\n\005index\030\002 \002(\r\022\017\n\007current\030\003 \002(\r\022\020\n\010land"
      "lord\030\004 \002(\r\022\017\n\007otherid\030\005 \003(\r\022\013\n\003cid\030\006 \003(\r"
      "\022,\n\005state\030\007 \002(\0162\035.room.ReconnectResp.Pla"
      "yState\")\n\tPlayState\022\010\n\004CALL\020\000\022\010\n\004RUSH\020\001\022"
      "\010\n\004PLAY\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2049);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "room.proto", &protobuf_RegisterTypes);
  ::base::protobuf_base_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_room_2eproto

const ::google::protobuf::EnumDescriptor* RoomInfo_RoomState_descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_enum_descriptors[0];
}
bool RoomInfo_RoomState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RoomInfo_RoomState RoomInfo::WAIT;
const RoomInfo_RoomState RoomInfo::START;
const RoomInfo_RoomState RoomInfo::RoomState_MIN;
const RoomInfo_RoomState RoomInfo::RoomState_MAX;
const int RoomInfo::RoomState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReconnectResp_PlayState_descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_enum_descriptors[1];
}
bool ReconnectResp_PlayState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReconnectResp_PlayState ReconnectResp::CALL;
const ReconnectResp_PlayState ReconnectResp::RUSH;
const ReconnectResp_PlayState ReconnectResp::PLAY;
const ReconnectResp_PlayState ReconnectResp::PlayState_MIN;
const ReconnectResp_PlayState ReconnectResp::PlayState_MAX;
const int ReconnectResp::PlayState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomInfo::kIdFieldNumber;
const int RoomInfo::kNameFieldNumber;
const int RoomInfo::kCountFieldNumber;
const int RoomInfo::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomInfo::RoomInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.RoomInfo)
}
RoomInfo::RoomInfo(const RoomInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:room.RoomInfo)
}

void RoomInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_) + sizeof(state_));
}

RoomInfo::~RoomInfo() {
  // @@protoc_insertion_point(destructor:room.RoomInfo)
  SharedDtor();
}

void RoomInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomInfo::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoomInfo& RoomInfo::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomInfo* RoomInfo::New(::google::protobuf::Arena* arena) const {
  RoomInfo* n = new RoomInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:room.RoomInfo)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&id_) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.RoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .room.RoomInfo.RoomState state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::room::RoomInfo_RoomState_IsValid(value)) {
            set_state(static_cast< ::room::RoomInfo_RoomState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.RoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.RoomInfo)
  return false;
#undef DO_
}

void RoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.RoomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required uint32 count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // required .room.RoomInfo.RoomState state = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.RoomInfo)
}

::google::protobuf::uint8* RoomInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.RoomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required uint32 count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // required .room.RoomInfo.RoomState state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.RoomInfo)
  return target;
}

size_t RoomInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:room.RoomInfo)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_count()) {
    // required uint32 count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  if (has_state()) {
    // required .room.RoomInfo.RoomState state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  return total_size;
}
size_t RoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.RoomInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

    // required .room.RoomInfo.RoomState state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.RoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.RoomInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.RoomInfo)
    MergeFrom(*source);
  }
}

void RoomInfo::MergeFrom(const RoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.RoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void RoomInfo::Swap(RoomInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomInfo::InternalSwap(RoomInfo* other) {
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  std::swap(count_, other->count_);
  std::swap(state_, other->state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomInfo::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomInfo

// required uint32 id = 1;
bool RoomInfo::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoomInfo::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void RoomInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoomInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 RoomInfo::id() const {
  // @@protoc_insertion_point(field_get:room.RoomInfo.id)
  return id_;
}
void RoomInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:room.RoomInfo.id)
}

// required bytes name = 2;
bool RoomInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& RoomInfo::name() const {
  // @@protoc_insertion_point(field_get:room.RoomInfo.name)
  return name_.GetNoArena();
}
void RoomInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:room.RoomInfo.name)
}
#if LANG_CXX11
void RoomInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:room.RoomInfo.name)
}
#endif
void RoomInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:room.RoomInfo.name)
}
void RoomInfo::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:room.RoomInfo.name)
}
::std::string* RoomInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:room.RoomInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RoomInfo::release_name() {
  // @@protoc_insertion_point(field_release:room.RoomInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RoomInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:room.RoomInfo.name)
}

// required uint32 count = 3;
bool RoomInfo::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoomInfo::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
void RoomInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoomInfo::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 RoomInfo::count() const {
  // @@protoc_insertion_point(field_get:room.RoomInfo.count)
  return count_;
}
void RoomInfo::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:room.RoomInfo.count)
}

// required .room.RoomInfo.RoomState state = 4;
bool RoomInfo::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RoomInfo::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
void RoomInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
void RoomInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
::room::RoomInfo_RoomState RoomInfo::state() const {
  // @@protoc_insertion_point(field_get:room.RoomInfo.state)
  return static_cast< ::room::RoomInfo_RoomState >(state_);
}
void RoomInfo::set_state(::room::RoomInfo_RoomState value) {
  assert(::room::RoomInfo_RoomState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:room.RoomInfo.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRoomReq::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRoomReq::GetRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.GetRoomReq)
}
GetRoomReq::GetRoomReq(const GetRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:room.GetRoomReq)
}

void GetRoomReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
}

GetRoomReq::~GetRoomReq() {
  // @@protoc_insertion_point(destructor:room.GetRoomReq)
  SharedDtor();
}

void GetRoomReq::SharedDtor() {
}

void GetRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoomReq::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRoomReq& GetRoomReq::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetRoomReq* GetRoomReq::New(::google::protobuf::Arena* arena) const {
  GetRoomReq* n = new GetRoomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:room.GetRoomReq)
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.GetRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.GetRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.GetRoomReq)
  return false;
#undef DO_
}

void GetRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.GetRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.GetRoomReq)
}

::google::protobuf::uint8* GetRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.GetRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.GetRoomReq)
  return target;
}

size_t GetRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.GetRoomReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.GetRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.GetRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.GetRoomReq)
    MergeFrom(*source);
  }
}

void GetRoomReq::MergeFrom(const GetRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.GetRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_id(from.id());
  }
}

void GetRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.GetRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoomReq::CopyFrom(const GetRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.GetRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetRoomReq::Swap(GetRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRoomReq::InternalSwap(GetRoomReq* other) {
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRoomReq::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRoomReq

// required uint32 id = 1;
bool GetRoomReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetRoomReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void GetRoomReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetRoomReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 GetRoomReq::id() const {
  // @@protoc_insertion_point(field_get:room.GetRoomReq.id)
  return id_;
}
void GetRoomReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:room.GetRoomReq.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRoomResp::kRoomsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRoomResp::GetRoomResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.GetRoomResp)
}
GetRoomResp::GetRoomResp(const GetRoomResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      rooms_(from.rooms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:room.GetRoomResp)
}

void GetRoomResp::SharedCtor() {
  _cached_size_ = 0;
}

GetRoomResp::~GetRoomResp() {
  // @@protoc_insertion_point(destructor:room.GetRoomResp)
  SharedDtor();
}

void GetRoomResp::SharedDtor() {
}

void GetRoomResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoomResp::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRoomResp& GetRoomResp::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetRoomResp* GetRoomResp::New(::google::protobuf::Arena* arena) const {
  GetRoomResp* n = new GetRoomResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRoomResp::Clear() {
// @@protoc_insertion_point(message_clear_start:room.GetRoomResp)
  rooms_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetRoomResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.GetRoomResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .room.RoomInfo rooms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rooms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.GetRoomResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.GetRoomResp)
  return false;
#undef DO_
}

void GetRoomResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.GetRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .room.RoomInfo rooms = 1;
  for (unsigned int i = 0, n = this->rooms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rooms(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.GetRoomResp)
}

::google::protobuf::uint8* GetRoomResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.GetRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .room.RoomInfo rooms = 1;
  for (unsigned int i = 0, n = this->rooms_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->rooms(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.GetRoomResp)
  return target;
}

size_t GetRoomResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.GetRoomResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .room.RoomInfo rooms = 1;
  {
    unsigned int count = this->rooms_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rooms(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoomResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.GetRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRoomResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRoomResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.GetRoomResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.GetRoomResp)
    MergeFrom(*source);
  }
}

void GetRoomResp::MergeFrom(const GetRoomResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.GetRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rooms_.MergeFrom(from.rooms_);
}

void GetRoomResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.GetRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoomResp::CopyFrom(const GetRoomResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.GetRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoomResp::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->rooms())) return false;
  return true;
}

void GetRoomResp::Swap(GetRoomResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRoomResp::InternalSwap(GetRoomResp* other) {
  rooms_.InternalSwap(&other->rooms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRoomResp::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRoomResp

// repeated .room.RoomInfo rooms = 1;
int GetRoomResp::rooms_size() const {
  return rooms_.size();
}
void GetRoomResp::clear_rooms() {
  rooms_.Clear();
}
const ::room::RoomInfo& GetRoomResp::rooms(int index) const {
  // @@protoc_insertion_point(field_get:room.GetRoomResp.rooms)
  return rooms_.Get(index);
}
::room::RoomInfo* GetRoomResp::mutable_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:room.GetRoomResp.rooms)
  return rooms_.Mutable(index);
}
::room::RoomInfo* GetRoomResp::add_rooms() {
  // @@protoc_insertion_point(field_add:room.GetRoomResp.rooms)
  return rooms_.Add();
}
::google::protobuf::RepeatedPtrField< ::room::RoomInfo >*
GetRoomResp::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:room.GetRoomResp.rooms)
  return &rooms_;
}
const ::google::protobuf::RepeatedPtrField< ::room::RoomInfo >&
GetRoomResp::rooms() const {
  // @@protoc_insertion_point(field_list:room.GetRoomResp.rooms)
  return rooms_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaveRoomReq::kUidFieldNumber;
const int LeaveRoomReq::kRidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaveRoomReq::LeaveRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.LeaveRoomReq)
}
LeaveRoomReq::LeaveRoomReq(const LeaveRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    reinterpret_cast<char*>(&rid_) -
    reinterpret_cast<char*>(&uid_) + sizeof(rid_));
  // @@protoc_insertion_point(copy_constructor:room.LeaveRoomReq)
}

void LeaveRoomReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&uid_, 0, reinterpret_cast<char*>(&rid_) -
    reinterpret_cast<char*>(&uid_) + sizeof(rid_));
}

LeaveRoomReq::~LeaveRoomReq() {
  // @@protoc_insertion_point(destructor:room.LeaveRoomReq)
  SharedDtor();
}

void LeaveRoomReq::SharedDtor() {
}

void LeaveRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveRoomReq::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeaveRoomReq& LeaveRoomReq::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

LeaveRoomReq* LeaveRoomReq::New(::google::protobuf::Arena* arena) const {
  LeaveRoomReq* n = new LeaveRoomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaveRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:room.LeaveRoomReq)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&uid_, 0, reinterpret_cast<char*>(&rid_) -
      reinterpret_cast<char*>(&uid_) + sizeof(rid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LeaveRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.LeaveRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 rid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_rid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.LeaveRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.LeaveRoomReq)
  return false;
#undef DO_
}

void LeaveRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.LeaveRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 rid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.LeaveRoomReq)
}

::google::protobuf::uint8* LeaveRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.LeaveRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 rid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.LeaveRoomReq)
  return target;
}

size_t LeaveRoomReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:room.LeaveRoomReq)
  size_t total_size = 0;

  if (has_uid()) {
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  if (has_rid()) {
    // required uint32 rid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());
  }

  return total_size;
}
size_t LeaveRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.LeaveRoomReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

    // required uint32 rid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.LeaveRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaveRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaveRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.LeaveRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.LeaveRoomReq)
    MergeFrom(*source);
  }
}

void LeaveRoomReq::MergeFrom(const LeaveRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.LeaveRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000002u) {
      rid_ = from.rid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LeaveRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.LeaveRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveRoomReq::CopyFrom(const LeaveRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.LeaveRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void LeaveRoomReq::Swap(LeaveRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaveRoomReq::InternalSwap(LeaveRoomReq* other) {
  std::swap(uid_, other->uid_);
  std::swap(rid_, other->rid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaveRoomReq::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaveRoomReq

// required uint32 uid = 1;
bool LeaveRoomReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LeaveRoomReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void LeaveRoomReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void LeaveRoomReq::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
::google::protobuf::uint32 LeaveRoomReq::uid() const {
  // @@protoc_insertion_point(field_get:room.LeaveRoomReq.uid)
  return uid_;
}
void LeaveRoomReq::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:room.LeaveRoomReq.uid)
}

// required uint32 rid = 2;
bool LeaveRoomReq::has_rid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LeaveRoomReq::set_has_rid() {
  _has_bits_[0] |= 0x00000002u;
}
void LeaveRoomReq::clear_has_rid() {
  _has_bits_[0] &= ~0x00000002u;
}
void LeaveRoomReq::clear_rid() {
  rid_ = 0u;
  clear_has_rid();
}
::google::protobuf::uint32 LeaveRoomReq::rid() const {
  // @@protoc_insertion_point(field_get:room.LeaveRoomReq.rid)
  return rid_;
}
void LeaveRoomReq::set_rid(::google::protobuf::uint32 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:room.LeaveRoomReq.rid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaveRoomResp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaveRoomResp::LeaveRoomResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.LeaveRoomResp)
}
LeaveRoomResp::LeaveRoomResp(const LeaveRoomResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:room.LeaveRoomResp)
}

void LeaveRoomResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

LeaveRoomResp::~LeaveRoomResp() {
  // @@protoc_insertion_point(destructor:room.LeaveRoomResp)
  SharedDtor();
}

void LeaveRoomResp::SharedDtor() {
}

void LeaveRoomResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveRoomResp::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeaveRoomResp& LeaveRoomResp::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

LeaveRoomResp* LeaveRoomResp::New(::google::protobuf::Arena* arena) const {
  LeaveRoomResp* n = new LeaveRoomResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaveRoomResp::Clear() {
// @@protoc_insertion_point(message_clear_start:room.LeaveRoomResp)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LeaveRoomResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.LeaveRoomResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .base.ERROR_CODE result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::base::ERROR_CODE_IsValid(value)) {
            set_result(static_cast< ::base::ERROR_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.LeaveRoomResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.LeaveRoomResp)
  return false;
#undef DO_
}

void LeaveRoomResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.LeaveRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .base.ERROR_CODE result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.LeaveRoomResp)
}

::google::protobuf::uint8* LeaveRoomResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.LeaveRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .base.ERROR_CODE result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.LeaveRoomResp)
  return target;
}

size_t LeaveRoomResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.LeaveRoomResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .base.ERROR_CODE result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveRoomResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.LeaveRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaveRoomResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaveRoomResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.LeaveRoomResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.LeaveRoomResp)
    MergeFrom(*source);
  }
}

void LeaveRoomResp::MergeFrom(const LeaveRoomResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.LeaveRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void LeaveRoomResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.LeaveRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveRoomResp::CopyFrom(const LeaveRoomResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.LeaveRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveRoomResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void LeaveRoomResp::Swap(LeaveRoomResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaveRoomResp::InternalSwap(LeaveRoomResp* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaveRoomResp::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaveRoomResp

// required .base.ERROR_CODE result = 1;
bool LeaveRoomResp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LeaveRoomResp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void LeaveRoomResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void LeaveRoomResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
::base::ERROR_CODE LeaveRoomResp::result() const {
  // @@protoc_insertion_point(field_get:room.LeaveRoomResp.result)
  return static_cast< ::base::ERROR_CODE >(result_);
}
void LeaveRoomResp::set_result(::base::ERROR_CODE value) {
  assert(::base::ERROR_CODE_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:room.LeaveRoomResp.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnterRoomReq::kUidFieldNumber;
const int EnterRoomReq::kRidFieldNumber;
const int EnterRoomReq::kAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnterRoomReq::EnterRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.EnterRoomReq)
}
EnterRoomReq::EnterRoomReq(const EnterRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account()) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  ::memcpy(&uid_, &from.uid_,
    reinterpret_cast<char*>(&rid_) -
    reinterpret_cast<char*>(&uid_) + sizeof(rid_));
  // @@protoc_insertion_point(copy_constructor:room.EnterRoomReq)
}

void EnterRoomReq::SharedCtor() {
  _cached_size_ = 0;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, reinterpret_cast<char*>(&rid_) -
    reinterpret_cast<char*>(&uid_) + sizeof(rid_));
}

EnterRoomReq::~EnterRoomReq() {
  // @@protoc_insertion_point(destructor:room.EnterRoomReq)
  SharedDtor();
}

void EnterRoomReq::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EnterRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterRoomReq::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnterRoomReq& EnterRoomReq::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

EnterRoomReq* EnterRoomReq::New(::google::protobuf::Arena* arena) const {
  EnterRoomReq* n = new EnterRoomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnterRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:room.EnterRoomReq)
  if (has_account()) {
    GOOGLE_DCHECK(!account_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*account_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&uid_, 0, reinterpret_cast<char*>(&rid_) -
      reinterpret_cast<char*>(&uid_) + sizeof(rid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EnterRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.EnterRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 rid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_rid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.EnterRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.EnterRoomReq)
  return false;
#undef DO_
}

void EnterRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.EnterRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 rid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rid(), output);
  }

  // required bytes account = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->account(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.EnterRoomReq)
}

::google::protobuf::uint8* EnterRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.EnterRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 rid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rid(), target);
  }

  // required bytes account = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->account(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.EnterRoomReq)
  return target;
}

size_t EnterRoomReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:room.EnterRoomReq)
  size_t total_size = 0;

  if (has_account()) {
    // required bytes account = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account());
  }

  if (has_uid()) {
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  if (has_rid()) {
    // required uint32 rid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());
  }

  return total_size;
}
size_t EnterRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.EnterRoomReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes account = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account());

    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

    // required uint32 rid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.EnterRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnterRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.EnterRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.EnterRoomReq)
    MergeFrom(*source);
  }
}

void EnterRoomReq::MergeFrom(const EnterRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.EnterRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000004u) {
      rid_ = from.rid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EnterRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.EnterRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRoomReq::CopyFrom(const EnterRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.EnterRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void EnterRoomReq::Swap(EnterRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnterRoomReq::InternalSwap(EnterRoomReq* other) {
  account_.Swap(&other->account_);
  std::swap(uid_, other->uid_);
  std::swap(rid_, other->rid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnterRoomReq::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnterRoomReq

// required uint32 uid = 1;
bool EnterRoomReq::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EnterRoomReq::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
void EnterRoomReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
void EnterRoomReq::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
::google::protobuf::uint32 EnterRoomReq::uid() const {
  // @@protoc_insertion_point(field_get:room.EnterRoomReq.uid)
  return uid_;
}
void EnterRoomReq::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:room.EnterRoomReq.uid)
}

// required uint32 rid = 2;
bool EnterRoomReq::has_rid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EnterRoomReq::set_has_rid() {
  _has_bits_[0] |= 0x00000004u;
}
void EnterRoomReq::clear_has_rid() {
  _has_bits_[0] &= ~0x00000004u;
}
void EnterRoomReq::clear_rid() {
  rid_ = 0u;
  clear_has_rid();
}
::google::protobuf::uint32 EnterRoomReq::rid() const {
  // @@protoc_insertion_point(field_get:room.EnterRoomReq.rid)
  return rid_;
}
void EnterRoomReq::set_rid(::google::protobuf::uint32 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:room.EnterRoomReq.rid)
}

// required bytes account = 3;
bool EnterRoomReq::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EnterRoomReq::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
void EnterRoomReq::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
void EnterRoomReq::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
const ::std::string& EnterRoomReq::account() const {
  // @@protoc_insertion_point(field_get:room.EnterRoomReq.account)
  return account_.GetNoArena();
}
void EnterRoomReq::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:room.EnterRoomReq.account)
}
#if LANG_CXX11
void EnterRoomReq::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:room.EnterRoomReq.account)
}
#endif
void EnterRoomReq::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:room.EnterRoomReq.account)
}
void EnterRoomReq::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:room.EnterRoomReq.account)
}
::std::string* EnterRoomReq::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:room.EnterRoomReq.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EnterRoomReq::release_account() {
  // @@protoc_insertion_point(field_release:room.EnterRoomReq.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EnterRoomReq::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:room.EnterRoomReq.account)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnterRoomResp::kResultFieldNumber;
const int EnterRoomResp::kDescFieldNumber;
const int EnterRoomResp::kRidFieldNumber;
const int EnterRoomResp::kIndexFieldNumber;
const int EnterRoomResp::kReadyFieldNumber;
const int EnterRoomResp::kOtheridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnterRoomResp::EnterRoomResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.EnterRoomResp)
}
EnterRoomResp::EnterRoomResp(const EnterRoomResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      otherid_(from.otherid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&ready_) -
    reinterpret_cast<char*>(&result_) + sizeof(ready_));
  // @@protoc_insertion_point(copy_constructor:room.EnterRoomResp)
}

void EnterRoomResp::SharedCtor() {
  _cached_size_ = 0;
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, reinterpret_cast<char*>(&ready_) -
    reinterpret_cast<char*>(&result_) + sizeof(ready_));
}

EnterRoomResp::~EnterRoomResp() {
  // @@protoc_insertion_point(destructor:room.EnterRoomResp)
  SharedDtor();
}

void EnterRoomResp::SharedDtor() {
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EnterRoomResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterRoomResp::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnterRoomResp& EnterRoomResp::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

EnterRoomResp* EnterRoomResp::New(::google::protobuf::Arena* arena) const {
  EnterRoomResp* n = new EnterRoomResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnterRoomResp::Clear() {
// @@protoc_insertion_point(message_clear_start:room.EnterRoomResp)
  otherid_.Clear();
  if (has_desc()) {
    GOOGLE_DCHECK(!desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*desc_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&result_, 0, reinterpret_cast<char*>(&ready_) -
      reinterpret_cast<char*>(&result_) + sizeof(ready_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EnterRoomResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.EnterRoomResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .base.ERROR_CODE result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::base::ERROR_CODE_IsValid(value)) {
            set_result(static_cast< ::base::ERROR_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes desc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_rid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ready = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_ready();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 otherid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_otherid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_otherid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.EnterRoomResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.EnterRoomResp)
  return false;
#undef DO_
}

void EnterRoomResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.EnterRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .base.ERROR_CODE result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional bytes desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->desc(), output);
  }

  // optional uint32 rid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rid(), output);
  }

  // optional uint32 index = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  // optional bool ready = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ready(), output);
  }

  // repeated uint32 otherid = 6;
  for (int i = 0, n = this->otherid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->otherid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.EnterRoomResp)
}

::google::protobuf::uint8* EnterRoomResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.EnterRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .base.ERROR_CODE result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional bytes desc = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->desc(), target);
  }

  // optional uint32 rid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rid(), target);
  }

  // optional uint32 index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  // optional bool ready = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ready(), target);
  }

  // repeated uint32 otherid = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->otherid_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.EnterRoomResp)
  return target;
}

size_t EnterRoomResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.EnterRoomResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .base.ERROR_CODE result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }
  // repeated uint32 otherid = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->otherid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->otherid_size());
    total_size += data_size;
  }

  // optional bytes desc = 2;
  if (has_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->desc());
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional uint32 rid = 3;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rid());
    }

    // optional uint32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional bool ready = 5;
    if (has_ready()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterRoomResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.EnterRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterRoomResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnterRoomResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.EnterRoomResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.EnterRoomResp)
    MergeFrom(*source);
  }
}

void EnterRoomResp::MergeFrom(const EnterRoomResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.EnterRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  otherid_.MergeFrom(from.otherid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      rid_ = from.rid_;
    }
    if (cached_has_bits & 0x00000008u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000010u) {
      ready_ = from.ready_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EnterRoomResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.EnterRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRoomResp::CopyFrom(const EnterRoomResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.EnterRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void EnterRoomResp::Swap(EnterRoomResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnterRoomResp::InternalSwap(EnterRoomResp* other) {
  otherid_.InternalSwap(&other->otherid_);
  desc_.Swap(&other->desc_);
  std::swap(result_, other->result_);
  std::swap(rid_, other->rid_);
  std::swap(index_, other->index_);
  std::swap(ready_, other->ready_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnterRoomResp::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnterRoomResp

// required .base.ERROR_CODE result = 1;
bool EnterRoomResp::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EnterRoomResp::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void EnterRoomResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void EnterRoomResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
::base::ERROR_CODE EnterRoomResp::result() const {
  // @@protoc_insertion_point(field_get:room.EnterRoomResp.result)
  return static_cast< ::base::ERROR_CODE >(result_);
}
void EnterRoomResp::set_result(::base::ERROR_CODE value) {
  assert(::base::ERROR_CODE_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:room.EnterRoomResp.result)
}

// optional bytes desc = 2;
bool EnterRoomResp::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EnterRoomResp::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
void EnterRoomResp::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
void EnterRoomResp::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
const ::std::string& EnterRoomResp::desc() const {
  // @@protoc_insertion_point(field_get:room.EnterRoomResp.desc)
  return desc_.GetNoArena();
}
void EnterRoomResp::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:room.EnterRoomResp.desc)
}
#if LANG_CXX11
void EnterRoomResp::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:room.EnterRoomResp.desc)
}
#endif
void EnterRoomResp::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:room.EnterRoomResp.desc)
}
void EnterRoomResp::set_desc(const void* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:room.EnterRoomResp.desc)
}
::std::string* EnterRoomResp::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:room.EnterRoomResp.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EnterRoomResp::release_desc() {
  // @@protoc_insertion_point(field_release:room.EnterRoomResp.desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EnterRoomResp::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:room.EnterRoomResp.desc)
}

// optional uint32 rid = 3;
bool EnterRoomResp::has_rid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EnterRoomResp::set_has_rid() {
  _has_bits_[0] |= 0x00000004u;
}
void EnterRoomResp::clear_has_rid() {
  _has_bits_[0] &= ~0x00000004u;
}
void EnterRoomResp::clear_rid() {
  rid_ = 0u;
  clear_has_rid();
}
::google::protobuf::uint32 EnterRoomResp::rid() const {
  // @@protoc_insertion_point(field_get:room.EnterRoomResp.rid)
  return rid_;
}
void EnterRoomResp::set_rid(::google::protobuf::uint32 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:room.EnterRoomResp.rid)
}

// optional uint32 index = 4;
bool EnterRoomResp::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EnterRoomResp::set_has_index() {
  _has_bits_[0] |= 0x00000008u;
}
void EnterRoomResp::clear_has_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void EnterRoomResp::clear_index() {
  index_ = 0u;
  clear_has_index();
}
::google::protobuf::uint32 EnterRoomResp::index() const {
  // @@protoc_insertion_point(field_get:room.EnterRoomResp.index)
  return index_;
}
void EnterRoomResp::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:room.EnterRoomResp.index)
}

// optional bool ready = 5;
bool EnterRoomResp::has_ready() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EnterRoomResp::set_has_ready() {
  _has_bits_[0] |= 0x00000010u;
}
void EnterRoomResp::clear_has_ready() {
  _has_bits_[0] &= ~0x00000010u;
}
void EnterRoomResp::clear_ready() {
  ready_ = false;
  clear_has_ready();
}
bool EnterRoomResp::ready() const {
  // @@protoc_insertion_point(field_get:room.EnterRoomResp.ready)
  return ready_;
}
void EnterRoomResp::set_ready(bool value) {
  set_has_ready();
  ready_ = value;
  // @@protoc_insertion_point(field_set:room.EnterRoomResp.ready)
}

// repeated uint32 otherid = 6;
int EnterRoomResp::otherid_size() const {
  return otherid_.size();
}
void EnterRoomResp::clear_otherid() {
  otherid_.Clear();
}
::google::protobuf::uint32 EnterRoomResp::otherid(int index) const {
  // @@protoc_insertion_point(field_get:room.EnterRoomResp.otherid)
  return otherid_.Get(index);
}
void EnterRoomResp::set_otherid(int index, ::google::protobuf::uint32 value) {
  otherid_.Set(index, value);
  // @@protoc_insertion_point(field_set:room.EnterRoomResp.otherid)
}
void EnterRoomResp::add_otherid(::google::protobuf::uint32 value) {
  otherid_.Add(value);
  // @@protoc_insertion_point(field_add:room.EnterRoomResp.otherid)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
EnterRoomResp::otherid() const {
  // @@protoc_insertion_point(field_list:room.EnterRoomResp.otherid)
  return otherid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
EnterRoomResp::mutable_otherid() {
  // @@protoc_insertion_point(field_mutable_list:room.EnterRoomResp.otherid)
  return &otherid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSeatInfoReq::kUidFieldNumber;
const int GetSeatInfoReq::kRidFieldNumber;
const int GetSeatInfoReq::kFindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSeatInfoReq::GetSeatInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.GetSeatInfoReq)
}
GetSeatInfoReq::GetSeatInfoReq(const GetSeatInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    reinterpret_cast<char*>(&find_) -
    reinterpret_cast<char*>(&uid_) + sizeof(find_));
  // @@protoc_insertion_point(copy_constructor:room.GetSeatInfoReq)
}

void GetSeatInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&uid_, 0, reinterpret_cast<char*>(&find_) -
    reinterpret_cast<char*>(&uid_) + sizeof(find_));
}

GetSeatInfoReq::~GetSeatInfoReq() {
  // @@protoc_insertion_point(destructor:room.GetSeatInfoReq)
  SharedDtor();
}

void GetSeatInfoReq::SharedDtor() {
}

void GetSeatInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSeatInfoReq::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSeatInfoReq& GetSeatInfoReq::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetSeatInfoReq* GetSeatInfoReq::New(::google::protobuf::Arena* arena) const {
  GetSeatInfoReq* n = new GetSeatInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetSeatInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:room.GetSeatInfoReq)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&uid_, 0, reinterpret_cast<char*>(&find_) -
      reinterpret_cast<char*>(&uid_) + sizeof(find_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetSeatInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.GetSeatInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 rid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_rid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 find = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_find();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &find_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.GetSeatInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.GetSeatInfoReq)
  return false;
#undef DO_
}

void GetSeatInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.GetSeatInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 rid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rid(), output);
  }

  // required uint32 find = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->find(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.GetSeatInfoReq)
}

::google::protobuf::uint8* GetSeatInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.GetSeatInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 rid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rid(), target);
  }

  // required uint32 find = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->find(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.GetSeatInfoReq)
  return target;
}

size_t GetSeatInfoReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:room.GetSeatInfoReq)
  size_t total_size = 0;

  if (has_uid()) {
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  if (has_rid()) {
    // required uint32 rid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());
  }

  if (has_find()) {
    // required uint32 find = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->find());
  }

  return total_size;
}
size_t GetSeatInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.GetSeatInfoReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

    // required uint32 rid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());

    // required uint32 find = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->find());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSeatInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.GetSeatInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSeatInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSeatInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.GetSeatInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.GetSeatInfoReq)
    MergeFrom(*source);
  }
}

void GetSeatInfoReq::MergeFrom(const GetSeatInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.GetSeatInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000002u) {
      rid_ = from.rid_;
    }
    if (cached_has_bits & 0x00000004u) {
      find_ = from.find_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetSeatInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.GetSeatInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSeatInfoReq::CopyFrom(const GetSeatInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.GetSeatInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSeatInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void GetSeatInfoReq::Swap(GetSeatInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSeatInfoReq::InternalSwap(GetSeatInfoReq* other) {
  std::swap(uid_, other->uid_);
  std::swap(rid_, other->rid_);
  std::swap(find_, other->find_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetSeatInfoReq::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetSeatInfoReq

// required uint32 uid = 1;
bool GetSeatInfoReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetSeatInfoReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void GetSeatInfoReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetSeatInfoReq::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
::google::protobuf::uint32 GetSeatInfoReq::uid() const {
  // @@protoc_insertion_point(field_get:room.GetSeatInfoReq.uid)
  return uid_;
}
void GetSeatInfoReq::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:room.GetSeatInfoReq.uid)
}

// required uint32 rid = 2;
bool GetSeatInfoReq::has_rid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetSeatInfoReq::set_has_rid() {
  _has_bits_[0] |= 0x00000002u;
}
void GetSeatInfoReq::clear_has_rid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetSeatInfoReq::clear_rid() {
  rid_ = 0u;
  clear_has_rid();
}
::google::protobuf::uint32 GetSeatInfoReq::rid() const {
  // @@protoc_insertion_point(field_get:room.GetSeatInfoReq.rid)
  return rid_;
}
void GetSeatInfoReq::set_rid(::google::protobuf::uint32 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:room.GetSeatInfoReq.rid)
}

// required uint32 find = 3;
bool GetSeatInfoReq::has_find() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetSeatInfoReq::set_has_find() {
  _has_bits_[0] |= 0x00000004u;
}
void GetSeatInfoReq::clear_has_find() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetSeatInfoReq::clear_find() {
  find_ = 0u;
  clear_has_find();
}
::google::protobuf::uint32 GetSeatInfoReq::find() const {
  // @@protoc_insertion_point(field_get:room.GetSeatInfoReq.find)
  return find_;
}
void GetSeatInfoReq::set_find(::google::protobuf::uint32 value) {
  set_has_find();
  find_ = value;
  // @@protoc_insertion_point(field_set:room.GetSeatInfoReq.find)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSeatInfoResp::kResultFieldNumber;
const int GetSeatInfoResp::kDescFieldNumber;
const int GetSeatInfoResp::kUidFieldNumber;
const int GetSeatInfoResp::kIndexFieldNumber;
const int GetSeatInfoResp::kAccountFieldNumber;
const int GetSeatInfoResp::kReadyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSeatInfoResp::GetSeatInfoResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.GetSeatInfoResp)
}
GetSeatInfoResp::GetSeatInfoResp(const GetSeatInfoResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account()) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&ready_) -
    reinterpret_cast<char*>(&result_) + sizeof(ready_));
  // @@protoc_insertion_point(copy_constructor:room.GetSeatInfoResp)
}

void GetSeatInfoResp::SharedCtor() {
  _cached_size_ = 0;
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, reinterpret_cast<char*>(&ready_) -
    reinterpret_cast<char*>(&result_) + sizeof(ready_));
}

GetSeatInfoResp::~GetSeatInfoResp() {
  // @@protoc_insertion_point(destructor:room.GetSeatInfoResp)
  SharedDtor();
}

void GetSeatInfoResp::SharedDtor() {
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetSeatInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSeatInfoResp::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSeatInfoResp& GetSeatInfoResp::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetSeatInfoResp* GetSeatInfoResp::New(::google::protobuf::Arena* arena) const {
  GetSeatInfoResp* n = new GetSeatInfoResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetSeatInfoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:room.GetSeatInfoResp)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_desc()) {
      GOOGLE_DCHECK(!desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*desc_.UnsafeRawStringPointer())->clear();
    }
    if (has_account()) {
      GOOGLE_DCHECK(!account_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*account_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&result_, 0, reinterpret_cast<char*>(&ready_) -
      reinterpret_cast<char*>(&result_) + sizeof(ready_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetSeatInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.GetSeatInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .base.ERROR_CODE result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::base::ERROR_CODE_IsValid(value)) {
            set_result(static_cast< ::base::ERROR_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes desc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 uid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes account = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool ready = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_ready();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.GetSeatInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.GetSeatInfoResp)
  return false;
#undef DO_
}

void GetSeatInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.GetSeatInfoResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .base.ERROR_CODE result = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional bytes desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->desc(), output);
  }

  // required uint32 uid = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  // required uint32 index = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  // required bytes account = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->account(), output);
  }

  // required bool ready = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ready(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.GetSeatInfoResp)
}

::google::protobuf::uint8* GetSeatInfoResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.GetSeatInfoResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .base.ERROR_CODE result = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional bytes desc = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->desc(), target);
  }

  // required uint32 uid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  // required uint32 index = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  // required bytes account = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->account(), target);
  }

  // required bool ready = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ready(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.GetSeatInfoResp)
  return target;
}

size_t GetSeatInfoResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:room.GetSeatInfoResp)
  size_t total_size = 0;

  if (has_account()) {
    // required bytes account = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account());
  }

  if (has_result()) {
    // required .base.ERROR_CODE result = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  if (has_uid()) {
    // required uint32 uid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  if (has_index()) {
    // required uint32 index = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  if (has_ready()) {
    // required bool ready = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t GetSeatInfoResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.GetSeatInfoResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003e) ^ 0x0000003e) == 0) {  // All required fields are present.
    // required bytes account = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account());

    // required .base.ERROR_CODE result = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());

    // required uint32 uid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

    // required uint32 index = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());

    // required bool ready = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes desc = 2;
  if (has_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->desc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSeatInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.GetSeatInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSeatInfoResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSeatInfoResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.GetSeatInfoResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.GetSeatInfoResp)
    MergeFrom(*source);
  }
}

void GetSeatInfoResp::MergeFrom(const GetSeatInfoResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.GetSeatInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000010u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000020u) {
      ready_ = from.ready_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetSeatInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.GetSeatInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSeatInfoResp::CopyFrom(const GetSeatInfoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.GetSeatInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSeatInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;
  return true;
}

void GetSeatInfoResp::Swap(GetSeatInfoResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSeatInfoResp::InternalSwap(GetSeatInfoResp* other) {
  desc_.Swap(&other->desc_);
  account_.Swap(&other->account_);
  std::swap(result_, other->result_);
  std::swap(uid_, other->uid_);
  std::swap(index_, other->index_);
  std::swap(ready_, other->ready_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetSeatInfoResp::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetSeatInfoResp

// required .base.ERROR_CODE result = 1;
bool GetSeatInfoResp::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetSeatInfoResp::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void GetSeatInfoResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetSeatInfoResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
::base::ERROR_CODE GetSeatInfoResp::result() const {
  // @@protoc_insertion_point(field_get:room.GetSeatInfoResp.result)
  return static_cast< ::base::ERROR_CODE >(result_);
}
void GetSeatInfoResp::set_result(::base::ERROR_CODE value) {
  assert(::base::ERROR_CODE_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:room.GetSeatInfoResp.result)
}

// optional bytes desc = 2;
bool GetSeatInfoResp::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetSeatInfoResp::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
void GetSeatInfoResp::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetSeatInfoResp::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
const ::std::string& GetSeatInfoResp::desc() const {
  // @@protoc_insertion_point(field_get:room.GetSeatInfoResp.desc)
  return desc_.GetNoArena();
}
void GetSeatInfoResp::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:room.GetSeatInfoResp.desc)
}
#if LANG_CXX11
void GetSeatInfoResp::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:room.GetSeatInfoResp.desc)
}
#endif
void GetSeatInfoResp::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:room.GetSeatInfoResp.desc)
}
void GetSeatInfoResp::set_desc(const void* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:room.GetSeatInfoResp.desc)
}
::std::string* GetSeatInfoResp::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:room.GetSeatInfoResp.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetSeatInfoResp::release_desc() {
  // @@protoc_insertion_point(field_release:room.GetSeatInfoResp.desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetSeatInfoResp::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:room.GetSeatInfoResp.desc)
}

// required uint32 uid = 3;
bool GetSeatInfoResp::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetSeatInfoResp::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
void GetSeatInfoResp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetSeatInfoResp::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
::google::protobuf::uint32 GetSeatInfoResp::uid() const {
  // @@protoc_insertion_point(field_get:room.GetSeatInfoResp.uid)
  return uid_;
}
void GetSeatInfoResp::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:room.GetSeatInfoResp.uid)
}

// required uint32 index = 4;
bool GetSeatInfoResp::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetSeatInfoResp::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
void GetSeatInfoResp::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetSeatInfoResp::clear_index() {
  index_ = 0u;
  clear_has_index();
}
::google::protobuf::uint32 GetSeatInfoResp::index() const {
  // @@protoc_insertion_point(field_get:room.GetSeatInfoResp.index)
  return index_;
}
void GetSeatInfoResp::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:room.GetSeatInfoResp.index)
}

// required bytes account = 5;
bool GetSeatInfoResp::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetSeatInfoResp::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
void GetSeatInfoResp::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetSeatInfoResp::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
const ::std::string& GetSeatInfoResp::account() const {
  // @@protoc_insertion_point(field_get:room.GetSeatInfoResp.account)
  return account_.GetNoArena();
}
void GetSeatInfoResp::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:room.GetSeatInfoResp.account)
}
#if LANG_CXX11
void GetSeatInfoResp::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:room.GetSeatInfoResp.account)
}
#endif
void GetSeatInfoResp::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:room.GetSeatInfoResp.account)
}
void GetSeatInfoResp::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:room.GetSeatInfoResp.account)
}
::std::string* GetSeatInfoResp::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:room.GetSeatInfoResp.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetSeatInfoResp::release_account() {
  // @@protoc_insertion_point(field_release:room.GetSeatInfoResp.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetSeatInfoResp::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:room.GetSeatInfoResp.account)
}

// required bool ready = 6;
bool GetSeatInfoResp::has_ready() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetSeatInfoResp::set_has_ready() {
  _has_bits_[0] |= 0x00000020u;
}
void GetSeatInfoResp::clear_has_ready() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetSeatInfoResp::clear_ready() {
  ready_ = false;
  clear_has_ready();
}
bool GetSeatInfoResp::ready() const {
  // @@protoc_insertion_point(field_get:room.GetSeatInfoResp.ready)
  return ready_;
}
void GetSeatInfoResp::set_ready(bool value) {
  set_has_ready();
  ready_ = value;
  // @@protoc_insertion_point(field_set:room.GetSeatInfoResp.ready)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateRoomReq::kIdFieldNumber;
const int CreateRoomReq::kAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRoomReq::CreateRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.CreateRoomReq)
}
CreateRoomReq::CreateRoomReq(const CreateRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account()) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:room.CreateRoomReq)
}

void CreateRoomReq::SharedCtor() {
  _cached_size_ = 0;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

CreateRoomReq::~CreateRoomReq() {
  // @@protoc_insertion_point(destructor:room.CreateRoomReq)
  SharedDtor();
}

void CreateRoomReq::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoomReq::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateRoomReq& CreateRoomReq::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateRoomReq* CreateRoomReq::New(::google::protobuf::Arena* arena) const {
  CreateRoomReq* n = new CreateRoomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:room.CreateRoomReq)
  if (has_account()) {
    GOOGLE_DCHECK(!account_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*account_.UnsafeRawStringPointer())->clear();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CreateRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.CreateRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.CreateRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.CreateRoomReq)
  return false;
#undef DO_
}

void CreateRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.CreateRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required bytes account = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->account(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.CreateRoomReq)
}

::google::protobuf::uint8* CreateRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.CreateRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required bytes account = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.CreateRoomReq)
  return target;
}

size_t CreateRoomReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:room.CreateRoomReq)
  size_t total_size = 0;

  if (has_account()) {
    // required bytes account = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account());
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  return total_size;
}
size_t CreateRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.CreateRoomReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes account = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account());

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.CreateRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.CreateRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.CreateRoomReq)
    MergeFrom(*source);
  }
}

void CreateRoomReq::MergeFrom(const CreateRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.CreateRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.CreateRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoomReq::CopyFrom(const CreateRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.CreateRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CreateRoomReq::Swap(CreateRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateRoomReq::InternalSwap(CreateRoomReq* other) {
  account_.Swap(&other->account_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateRoomReq::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateRoomReq

// required uint32 id = 1;
bool CreateRoomReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CreateRoomReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CreateRoomReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CreateRoomReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 CreateRoomReq::id() const {
  // @@protoc_insertion_point(field_get:room.CreateRoomReq.id)
  return id_;
}
void CreateRoomReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:room.CreateRoomReq.id)
}

// required bytes account = 2;
bool CreateRoomReq::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreateRoomReq::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
void CreateRoomReq::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreateRoomReq::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
const ::std::string& CreateRoomReq::account() const {
  // @@protoc_insertion_point(field_get:room.CreateRoomReq.account)
  return account_.GetNoArena();
}
void CreateRoomReq::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:room.CreateRoomReq.account)
}
#if LANG_CXX11
void CreateRoomReq::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:room.CreateRoomReq.account)
}
#endif
void CreateRoomReq::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:room.CreateRoomReq.account)
}
void CreateRoomReq::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:room.CreateRoomReq.account)
}
::std::string* CreateRoomReq::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:room.CreateRoomReq.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateRoomReq::release_account() {
  // @@protoc_insertion_point(field_release:room.CreateRoomReq.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateRoomReq::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:room.CreateRoomReq.account)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateRoomResp::kResultFieldNumber;
const int CreateRoomResp::kDescFieldNumber;
const int CreateRoomResp::kRidFieldNumber;
const int CreateRoomResp::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRoomResp::CreateRoomResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.CreateRoomResp)
}
CreateRoomResp::CreateRoomResp(const CreateRoomResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&result_) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:room.CreateRoomResp)
}

void CreateRoomResp::SharedCtor() {
  _cached_size_ = 0;
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&result_) + sizeof(index_));
}

CreateRoomResp::~CreateRoomResp() {
  // @@protoc_insertion_point(destructor:room.CreateRoomResp)
  SharedDtor();
}

void CreateRoomResp::SharedDtor() {
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateRoomResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoomResp::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateRoomResp& CreateRoomResp::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateRoomResp* CreateRoomResp::New(::google::protobuf::Arena* arena) const {
  CreateRoomResp* n = new CreateRoomResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateRoomResp::Clear() {
// @@protoc_insertion_point(message_clear_start:room.CreateRoomResp)
  if (has_desc()) {
    GOOGLE_DCHECK(!desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*desc_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&result_, 0, reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&result_) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CreateRoomResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.CreateRoomResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .base.ERROR_CODE result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::base::ERROR_CODE_IsValid(value)) {
            set_result(static_cast< ::base::ERROR_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes desc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_rid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.CreateRoomResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.CreateRoomResp)
  return false;
#undef DO_
}

void CreateRoomResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.CreateRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .base.ERROR_CODE result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional bytes desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->desc(), output);
  }

  // optional uint32 rid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rid(), output);
  }

  // optional uint32 index = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.CreateRoomResp)
}

::google::protobuf::uint8* CreateRoomResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.CreateRoomResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .base.ERROR_CODE result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional bytes desc = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->desc(), target);
  }

  // optional uint32 rid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rid(), target);
  }

  // optional uint32 index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.CreateRoomResp)
  return target;
}

size_t CreateRoomResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.CreateRoomResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .base.ERROR_CODE result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }
  // optional bytes desc = 2;
  if (has_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->desc());
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 rid = 3;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rid());
    }

    // optional uint32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoomResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.CreateRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRoomResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateRoomResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.CreateRoomResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.CreateRoomResp)
    MergeFrom(*source);
  }
}

void CreateRoomResp::MergeFrom(const CreateRoomResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.CreateRoomResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      rid_ = from.rid_;
    }
    if (cached_has_bits & 0x00000008u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateRoomResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.CreateRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoomResp::CopyFrom(const CreateRoomResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.CreateRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void CreateRoomResp::Swap(CreateRoomResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateRoomResp::InternalSwap(CreateRoomResp* other) {
  desc_.Swap(&other->desc_);
  std::swap(result_, other->result_);
  std::swap(rid_, other->rid_);
  std::swap(index_, other->index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateRoomResp::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateRoomResp

// required .base.ERROR_CODE result = 1;
bool CreateRoomResp::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CreateRoomResp::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void CreateRoomResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void CreateRoomResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
::base::ERROR_CODE CreateRoomResp::result() const {
  // @@protoc_insertion_point(field_get:room.CreateRoomResp.result)
  return static_cast< ::base::ERROR_CODE >(result_);
}
void CreateRoomResp::set_result(::base::ERROR_CODE value) {
  assert(::base::ERROR_CODE_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:room.CreateRoomResp.result)
}

// optional bytes desc = 2;
bool CreateRoomResp::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreateRoomResp::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
void CreateRoomResp::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreateRoomResp::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
const ::std::string& CreateRoomResp::desc() const {
  // @@protoc_insertion_point(field_get:room.CreateRoomResp.desc)
  return desc_.GetNoArena();
}
void CreateRoomResp::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:room.CreateRoomResp.desc)
}
#if LANG_CXX11
void CreateRoomResp::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:room.CreateRoomResp.desc)
}
#endif
void CreateRoomResp::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:room.CreateRoomResp.desc)
}
void CreateRoomResp::set_desc(const void* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:room.CreateRoomResp.desc)
}
::std::string* CreateRoomResp::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:room.CreateRoomResp.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateRoomResp::release_desc() {
  // @@protoc_insertion_point(field_release:room.CreateRoomResp.desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateRoomResp::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:room.CreateRoomResp.desc)
}

// optional uint32 rid = 3;
bool CreateRoomResp::has_rid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CreateRoomResp::set_has_rid() {
  _has_bits_[0] |= 0x00000004u;
}
void CreateRoomResp::clear_has_rid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CreateRoomResp::clear_rid() {
  rid_ = 0u;
  clear_has_rid();
}
::google::protobuf::uint32 CreateRoomResp::rid() const {
  // @@protoc_insertion_point(field_get:room.CreateRoomResp.rid)
  return rid_;
}
void CreateRoomResp::set_rid(::google::protobuf::uint32 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:room.CreateRoomResp.rid)
}

// optional uint32 index = 4;
bool CreateRoomResp::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CreateRoomResp::set_has_index() {
  _has_bits_[0] |= 0x00000008u;
}
void CreateRoomResp::clear_has_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void CreateRoomResp::clear_index() {
  index_ = 0u;
  clear_has_index();
}
::google::protobuf::uint32 CreateRoomResp::index() const {
  // @@protoc_insertion_point(field_get:room.CreateRoomResp.index)
  return index_;
}
void CreateRoomResp::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:room.CreateRoomResp.index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnterRoomNtf::kRidFieldNumber;
const int EnterRoomNtf::kUidFieldNumber;
const int EnterRoomNtf::kIndexFieldNumber;
const int EnterRoomNtf::kReadyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnterRoomNtf::EnterRoomNtf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.EnterRoomNtf)
}
EnterRoomNtf::EnterRoomNtf(const EnterRoomNtf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rid_, &from.rid_,
    reinterpret_cast<char*>(&ready_) -
    reinterpret_cast<char*>(&rid_) + sizeof(ready_));
  // @@protoc_insertion_point(copy_constructor:room.EnterRoomNtf)
}

void EnterRoomNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rid_, 0, reinterpret_cast<char*>(&ready_) -
    reinterpret_cast<char*>(&rid_) + sizeof(ready_));
}

EnterRoomNtf::~EnterRoomNtf() {
  // @@protoc_insertion_point(destructor:room.EnterRoomNtf)
  SharedDtor();
}

void EnterRoomNtf::SharedDtor() {
}

void EnterRoomNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterRoomNtf::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnterRoomNtf& EnterRoomNtf::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

EnterRoomNtf* EnterRoomNtf::New(::google::protobuf::Arena* arena) const {
  EnterRoomNtf* n = new EnterRoomNtf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnterRoomNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:room.EnterRoomNtf)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&rid_, 0, reinterpret_cast<char*>(&ready_) -
      reinterpret_cast<char*>(&rid_) + sizeof(ready_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EnterRoomNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.EnterRoomNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_rid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool ready = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_ready();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.EnterRoomNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.EnterRoomNtf)
  return false;
#undef DO_
}

void EnterRoomNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.EnterRoomNtf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 rid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rid(), output);
  }

  // required uint32 uid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // required bool ready = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ready(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.EnterRoomNtf)
}

::google::protobuf::uint8* EnterRoomNtf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.EnterRoomNtf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 rid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rid(), target);
  }

  // required uint32 uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // required bool ready = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ready(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.EnterRoomNtf)
  return target;
}

size_t EnterRoomNtf::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:room.EnterRoomNtf)
  size_t total_size = 0;

  if (has_rid()) {
    // required uint32 rid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());
  }

  if (has_uid()) {
    // required uint32 uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  if (has_index()) {
    // required uint32 index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  if (has_ready()) {
    // required bool ready = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t EnterRoomNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.EnterRoomNtf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 rid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());

    // required uint32 uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

    // required uint32 index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());

    // required bool ready = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterRoomNtf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.EnterRoomNtf)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterRoomNtf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnterRoomNtf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.EnterRoomNtf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.EnterRoomNtf)
    MergeFrom(*source);
  }
}

void EnterRoomNtf::MergeFrom(const EnterRoomNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.EnterRoomNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      rid_ = from.rid_;
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000004u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000008u) {
      ready_ = from.ready_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EnterRoomNtf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.EnterRoomNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRoomNtf::CopyFrom(const EnterRoomNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.EnterRoomNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void EnterRoomNtf::Swap(EnterRoomNtf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnterRoomNtf::InternalSwap(EnterRoomNtf* other) {
  std::swap(rid_, other->rid_);
  std::swap(uid_, other->uid_);
  std::swap(index_, other->index_);
  std::swap(ready_, other->ready_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnterRoomNtf::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnterRoomNtf

// required uint32 rid = 1;
bool EnterRoomNtf::has_rid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EnterRoomNtf::set_has_rid() {
  _has_bits_[0] |= 0x00000001u;
}
void EnterRoomNtf::clear_has_rid() {
  _has_bits_[0] &= ~0x00000001u;
}
void EnterRoomNtf::clear_rid() {
  rid_ = 0u;
  clear_has_rid();
}
::google::protobuf::uint32 EnterRoomNtf::rid() const {
  // @@protoc_insertion_point(field_get:room.EnterRoomNtf.rid)
  return rid_;
}
void EnterRoomNtf::set_rid(::google::protobuf::uint32 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:room.EnterRoomNtf.rid)
}

// required uint32 uid = 2;
bool EnterRoomNtf::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EnterRoomNtf::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
void EnterRoomNtf::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
void EnterRoomNtf::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
::google::protobuf::uint32 EnterRoomNtf::uid() const {
  // @@protoc_insertion_point(field_get:room.EnterRoomNtf.uid)
  return uid_;
}
void EnterRoomNtf::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:room.EnterRoomNtf.uid)
}

// required uint32 index = 3;
bool EnterRoomNtf::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EnterRoomNtf::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
void EnterRoomNtf::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void EnterRoomNtf::clear_index() {
  index_ = 0u;
  clear_has_index();
}
::google::protobuf::uint32 EnterRoomNtf::index() const {
  // @@protoc_insertion_point(field_get:room.EnterRoomNtf.index)
  return index_;
}
void EnterRoomNtf::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:room.EnterRoomNtf.index)
}

// required bool ready = 5;
bool EnterRoomNtf::has_ready() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EnterRoomNtf::set_has_ready() {
  _has_bits_[0] |= 0x00000008u;
}
void EnterRoomNtf::clear_has_ready() {
  _has_bits_[0] &= ~0x00000008u;
}
void EnterRoomNtf::clear_ready() {
  ready_ = false;
  clear_has_ready();
}
bool EnterRoomNtf::ready() const {
  // @@protoc_insertion_point(field_get:room.EnterRoomNtf.ready)
  return ready_;
}
void EnterRoomNtf::set_ready(bool value) {
  set_has_ready();
  ready_ = value;
  // @@protoc_insertion_point(field_set:room.EnterRoomNtf.ready)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaveRoomNtf::kRidFieldNumber;
const int LeaveRoomNtf::kUidFieldNumber;
const int LeaveRoomNtf::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaveRoomNtf::LeaveRoomNtf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.LeaveRoomNtf)
}
LeaveRoomNtf::LeaveRoomNtf(const LeaveRoomNtf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rid_, &from.rid_,
    reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&rid_) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:room.LeaveRoomNtf)
}

void LeaveRoomNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rid_, 0, reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&rid_) + sizeof(index_));
}

LeaveRoomNtf::~LeaveRoomNtf() {
  // @@protoc_insertion_point(destructor:room.LeaveRoomNtf)
  SharedDtor();
}

void LeaveRoomNtf::SharedDtor() {
}

void LeaveRoomNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveRoomNtf::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeaveRoomNtf& LeaveRoomNtf::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

LeaveRoomNtf* LeaveRoomNtf::New(::google::protobuf::Arena* arena) const {
  LeaveRoomNtf* n = new LeaveRoomNtf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaveRoomNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:room.LeaveRoomNtf)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&rid_, 0, reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&rid_) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LeaveRoomNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.LeaveRoomNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_rid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.LeaveRoomNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.LeaveRoomNtf)
  return false;
#undef DO_
}

void LeaveRoomNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.LeaveRoomNtf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 rid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rid(), output);
  }

  // required uint32 uid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.LeaveRoomNtf)
}

::google::protobuf::uint8* LeaveRoomNtf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.LeaveRoomNtf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 rid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rid(), target);
  }

  // required uint32 uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.LeaveRoomNtf)
  return target;
}

size_t LeaveRoomNtf::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:room.LeaveRoomNtf)
  size_t total_size = 0;

  if (has_rid()) {
    // required uint32 rid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());
  }

  if (has_uid()) {
    // required uint32 uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  if (has_index()) {
    // required uint32 index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  return total_size;
}
size_t LeaveRoomNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.LeaveRoomNtf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 rid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());

    // required uint32 uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

    // required uint32 index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveRoomNtf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.LeaveRoomNtf)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaveRoomNtf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaveRoomNtf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.LeaveRoomNtf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.LeaveRoomNtf)
    MergeFrom(*source);
  }
}

void LeaveRoomNtf::MergeFrom(const LeaveRoomNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.LeaveRoomNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      rid_ = from.rid_;
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000004u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LeaveRoomNtf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.LeaveRoomNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveRoomNtf::CopyFrom(const LeaveRoomNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.LeaveRoomNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveRoomNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void LeaveRoomNtf::Swap(LeaveRoomNtf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaveRoomNtf::InternalSwap(LeaveRoomNtf* other) {
  std::swap(rid_, other->rid_);
  std::swap(uid_, other->uid_);
  std::swap(index_, other->index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaveRoomNtf::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaveRoomNtf

// required uint32 rid = 1;
bool LeaveRoomNtf::has_rid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LeaveRoomNtf::set_has_rid() {
  _has_bits_[0] |= 0x00000001u;
}
void LeaveRoomNtf::clear_has_rid() {
  _has_bits_[0] &= ~0x00000001u;
}
void LeaveRoomNtf::clear_rid() {
  rid_ = 0u;
  clear_has_rid();
}
::google::protobuf::uint32 LeaveRoomNtf::rid() const {
  // @@protoc_insertion_point(field_get:room.LeaveRoomNtf.rid)
  return rid_;
}
void LeaveRoomNtf::set_rid(::google::protobuf::uint32 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:room.LeaveRoomNtf.rid)
}

// required uint32 uid = 2;
bool LeaveRoomNtf::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LeaveRoomNtf::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
void LeaveRoomNtf::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
void LeaveRoomNtf::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
::google::protobuf::uint32 LeaveRoomNtf::uid() const {
  // @@protoc_insertion_point(field_get:room.LeaveRoomNtf.uid)
  return uid_;
}
void LeaveRoomNtf::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:room.LeaveRoomNtf.uid)
}

// required uint32 index = 3;
bool LeaveRoomNtf::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LeaveRoomNtf::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
void LeaveRoomNtf::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void LeaveRoomNtf::clear_index() {
  index_ = 0u;
  clear_has_index();
}
::google::protobuf::uint32 LeaveRoomNtf::index() const {
  // @@protoc_insertion_point(field_get:room.LeaveRoomNtf.index)
  return index_;
}
void LeaveRoomNtf::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:room.LeaveRoomNtf.index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadyReq::kUidFieldNumber;
const int ReadyReq::kRidFieldNumber;
const int ReadyReq::kReadyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadyReq::ReadyReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.ReadyReq)
}
ReadyReq::ReadyReq(const ReadyReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    reinterpret_cast<char*>(&ready_) -
    reinterpret_cast<char*>(&uid_) + sizeof(ready_));
  // @@protoc_insertion_point(copy_constructor:room.ReadyReq)
}

void ReadyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&uid_, 0, reinterpret_cast<char*>(&ready_) -
    reinterpret_cast<char*>(&uid_) + sizeof(ready_));
}

ReadyReq::~ReadyReq() {
  // @@protoc_insertion_point(destructor:room.ReadyReq)
  SharedDtor();
}

void ReadyReq::SharedDtor() {
}

void ReadyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadyReq::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReadyReq& ReadyReq::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReadyReq* ReadyReq::New(::google::protobuf::Arena* arena) const {
  ReadyReq* n = new ReadyReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:room.ReadyReq)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&uid_, 0, reinterpret_cast<char*>(&ready_) -
      reinterpret_cast<char*>(&uid_) + sizeof(ready_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReadyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.ReadyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 rid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_rid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool ready = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ready();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.ReadyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.ReadyReq)
  return false;
#undef DO_
}

void ReadyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.ReadyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 rid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rid(), output);
  }

  // required bool ready = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ready(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.ReadyReq)
}

::google::protobuf::uint8* ReadyReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.ReadyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 rid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rid(), target);
  }

  // required bool ready = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ready(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.ReadyReq)
  return target;
}

size_t ReadyReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:room.ReadyReq)
  size_t total_size = 0;

  if (has_uid()) {
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  if (has_rid()) {
    // required uint32 rid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());
  }

  if (has_ready()) {
    // required bool ready = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ReadyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.ReadyReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

    // required uint32 rid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());

    // required bool ready = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadyReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.ReadyReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadyReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadyReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.ReadyReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.ReadyReq)
    MergeFrom(*source);
  }
}

void ReadyReq::MergeFrom(const ReadyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.ReadyReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000002u) {
      rid_ = from.rid_;
    }
    if (cached_has_bits & 0x00000004u) {
      ready_ = from.ready_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReadyReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.ReadyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadyReq::CopyFrom(const ReadyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.ReadyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ReadyReq::Swap(ReadyReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadyReq::InternalSwap(ReadyReq* other) {
  std::swap(uid_, other->uid_);
  std::swap(rid_, other->rid_);
  std::swap(ready_, other->ready_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadyReq::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadyReq

// required uint32 uid = 1;
bool ReadyReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReadyReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReadyReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReadyReq::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
::google::protobuf::uint32 ReadyReq::uid() const {
  // @@protoc_insertion_point(field_get:room.ReadyReq.uid)
  return uid_;
}
void ReadyReq::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:room.ReadyReq.uid)
}

// required uint32 rid = 2;
bool ReadyReq::has_rid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReadyReq::set_has_rid() {
  _has_bits_[0] |= 0x00000002u;
}
void ReadyReq::clear_has_rid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReadyReq::clear_rid() {
  rid_ = 0u;
  clear_has_rid();
}
::google::protobuf::uint32 ReadyReq::rid() const {
  // @@protoc_insertion_point(field_get:room.ReadyReq.rid)
  return rid_;
}
void ReadyReq::set_rid(::google::protobuf::uint32 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:room.ReadyReq.rid)
}

// required bool ready = 3;
bool ReadyReq::has_ready() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReadyReq::set_has_ready() {
  _has_bits_[0] |= 0x00000004u;
}
void ReadyReq::clear_has_ready() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReadyReq::clear_ready() {
  ready_ = false;
  clear_has_ready();
}
bool ReadyReq::ready() const {
  // @@protoc_insertion_point(field_get:room.ReadyReq.ready)
  return ready_;
}
void ReadyReq::set_ready(bool value) {
  set_has_ready();
  ready_ = value;
  // @@protoc_insertion_point(field_set:room.ReadyReq.ready)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadyResp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadyResp::ReadyResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.ReadyResp)
}
ReadyResp::ReadyResp(const ReadyResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:room.ReadyResp)
}

void ReadyResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

ReadyResp::~ReadyResp() {
  // @@protoc_insertion_point(destructor:room.ReadyResp)
  SharedDtor();
}

void ReadyResp::SharedDtor() {
}

void ReadyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadyResp::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReadyResp& ReadyResp::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReadyResp* ReadyResp::New(::google::protobuf::Arena* arena) const {
  ReadyResp* n = new ReadyResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadyResp::Clear() {
// @@protoc_insertion_point(message_clear_start:room.ReadyResp)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReadyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.ReadyResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .base.ERROR_CODE result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::base::ERROR_CODE_IsValid(value)) {
            set_result(static_cast< ::base::ERROR_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.ReadyResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.ReadyResp)
  return false;
#undef DO_
}

void ReadyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.ReadyResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .base.ERROR_CODE result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.ReadyResp)
}

::google::protobuf::uint8* ReadyResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.ReadyResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .base.ERROR_CODE result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.ReadyResp)
  return target;
}

size_t ReadyResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.ReadyResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .base.ERROR_CODE result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadyResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.ReadyResp)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadyResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadyResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.ReadyResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.ReadyResp)
    MergeFrom(*source);
  }
}

void ReadyResp::MergeFrom(const ReadyResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.ReadyResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void ReadyResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.ReadyResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadyResp::CopyFrom(const ReadyResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.ReadyResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadyResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ReadyResp::Swap(ReadyResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadyResp::InternalSwap(ReadyResp* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadyResp::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadyResp

// required .base.ERROR_CODE result = 1;
bool ReadyResp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReadyResp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void ReadyResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReadyResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
::base::ERROR_CODE ReadyResp::result() const {
  // @@protoc_insertion_point(field_get:room.ReadyResp.result)
  return static_cast< ::base::ERROR_CODE >(result_);
}
void ReadyResp::set_result(::base::ERROR_CODE value) {
  assert(::base::ERROR_CODE_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:room.ReadyResp.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadyNtf::kUidFieldNumber;
const int ReadyNtf::kRidFieldNumber;
const int ReadyNtf::kIndexFieldNumber;
const int ReadyNtf::kReadyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadyNtf::ReadyNtf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.ReadyNtf)
}
ReadyNtf::ReadyNtf(const ReadyNtf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    reinterpret_cast<char*>(&ready_) -
    reinterpret_cast<char*>(&uid_) + sizeof(ready_));
  // @@protoc_insertion_point(copy_constructor:room.ReadyNtf)
}

void ReadyNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&uid_, 0, reinterpret_cast<char*>(&ready_) -
    reinterpret_cast<char*>(&uid_) + sizeof(ready_));
}

ReadyNtf::~ReadyNtf() {
  // @@protoc_insertion_point(destructor:room.ReadyNtf)
  SharedDtor();
}

void ReadyNtf::SharedDtor() {
}

void ReadyNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadyNtf::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReadyNtf& ReadyNtf::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReadyNtf* ReadyNtf::New(::google::protobuf::Arena* arena) const {
  ReadyNtf* n = new ReadyNtf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadyNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:room.ReadyNtf)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&uid_, 0, reinterpret_cast<char*>(&ready_) -
      reinterpret_cast<char*>(&uid_) + sizeof(ready_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReadyNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.ReadyNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 rid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_rid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool ready = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ready();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.ReadyNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.ReadyNtf)
  return false;
#undef DO_
}

void ReadyNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.ReadyNtf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 rid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rid(), output);
  }

  // required uint32 index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // required bool ready = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ready(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.ReadyNtf)
}

::google::protobuf::uint8* ReadyNtf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.ReadyNtf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 rid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rid(), target);
  }

  // required uint32 index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // required bool ready = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ready(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.ReadyNtf)
  return target;
}

size_t ReadyNtf::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:room.ReadyNtf)
  size_t total_size = 0;

  if (has_uid()) {
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  if (has_rid()) {
    // required uint32 rid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());
  }

  if (has_index()) {
    // required uint32 index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  if (has_ready()) {
    // required bool ready = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ReadyNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.ReadyNtf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

    // required uint32 rid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());

    // required uint32 index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());

    // required bool ready = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadyNtf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.ReadyNtf)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadyNtf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadyNtf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.ReadyNtf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.ReadyNtf)
    MergeFrom(*source);
  }
}

void ReadyNtf::MergeFrom(const ReadyNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.ReadyNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000002u) {
      rid_ = from.rid_;
    }
    if (cached_has_bits & 0x00000004u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000008u) {
      ready_ = from.ready_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReadyNtf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.ReadyNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadyNtf::CopyFrom(const ReadyNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.ReadyNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadyNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ReadyNtf::Swap(ReadyNtf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadyNtf::InternalSwap(ReadyNtf* other) {
  std::swap(uid_, other->uid_);
  std::swap(rid_, other->rid_);
  std::swap(index_, other->index_);
  std::swap(ready_, other->ready_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadyNtf::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadyNtf

// required uint32 uid = 1;
bool ReadyNtf::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReadyNtf::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReadyNtf::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReadyNtf::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
::google::protobuf::uint32 ReadyNtf::uid() const {
  // @@protoc_insertion_point(field_get:room.ReadyNtf.uid)
  return uid_;
}
void ReadyNtf::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:room.ReadyNtf.uid)
}

// required uint32 rid = 2;
bool ReadyNtf::has_rid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReadyNtf::set_has_rid() {
  _has_bits_[0] |= 0x00000002u;
}
void ReadyNtf::clear_has_rid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReadyNtf::clear_rid() {
  rid_ = 0u;
  clear_has_rid();
}
::google::protobuf::uint32 ReadyNtf::rid() const {
  // @@protoc_insertion_point(field_get:room.ReadyNtf.rid)
  return rid_;
}
void ReadyNtf::set_rid(::google::protobuf::uint32 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:room.ReadyNtf.rid)
}

// required uint32 index = 3;
bool ReadyNtf::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReadyNtf::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
void ReadyNtf::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReadyNtf::clear_index() {
  index_ = 0u;
  clear_has_index();
}
::google::protobuf::uint32 ReadyNtf::index() const {
  // @@protoc_insertion_point(field_get:room.ReadyNtf.index)
  return index_;
}
void ReadyNtf::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:room.ReadyNtf.index)
}

// required bool ready = 4;
bool ReadyNtf::has_ready() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReadyNtf::set_has_ready() {
  _has_bits_[0] |= 0x00000008u;
}
void ReadyNtf::clear_has_ready() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReadyNtf::clear_ready() {
  ready_ = false;
  clear_has_ready();
}
bool ReadyNtf::ready() const {
  // @@protoc_insertion_point(field_get:room.ReadyNtf.ready)
  return ready_;
}
void ReadyNtf::set_ready(bool value) {
  set_has_ready();
  ready_ = value;
  // @@protoc_insertion_point(field_set:room.ReadyNtf.ready)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameBeginNtf::kRidFieldNumber;
const int GameBeginNtf::kFirstFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameBeginNtf::GameBeginNtf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.GameBeginNtf)
}
GameBeginNtf::GameBeginNtf(const GameBeginNtf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rid_, &from.rid_,
    reinterpret_cast<char*>(&first_) -
    reinterpret_cast<char*>(&rid_) + sizeof(first_));
  // @@protoc_insertion_point(copy_constructor:room.GameBeginNtf)
}

void GameBeginNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rid_, 0, reinterpret_cast<char*>(&first_) -
    reinterpret_cast<char*>(&rid_) + sizeof(first_));
}

GameBeginNtf::~GameBeginNtf() {
  // @@protoc_insertion_point(destructor:room.GameBeginNtf)
  SharedDtor();
}

void GameBeginNtf::SharedDtor() {
}

void GameBeginNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameBeginNtf::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameBeginNtf& GameBeginNtf::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameBeginNtf* GameBeginNtf::New(::google::protobuf::Arena* arena) const {
  GameBeginNtf* n = new GameBeginNtf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameBeginNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:room.GameBeginNtf)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&rid_, 0, reinterpret_cast<char*>(&first_) -
      reinterpret_cast<char*>(&rid_) + sizeof(first_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameBeginNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.GameBeginNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_rid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 first = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_first();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.GameBeginNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.GameBeginNtf)
  return false;
#undef DO_
}

void GameBeginNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.GameBeginNtf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 rid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rid(), output);
  }

  // required uint32 first = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->first(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.GameBeginNtf)
}

::google::protobuf::uint8* GameBeginNtf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.GameBeginNtf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 rid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rid(), target);
  }

  // required uint32 first = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->first(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.GameBeginNtf)
  return target;
}

size_t GameBeginNtf::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:room.GameBeginNtf)
  size_t total_size = 0;

  if (has_rid()) {
    // required uint32 rid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());
  }

  if (has_first()) {
    // required uint32 first = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->first());
  }

  return total_size;
}
size_t GameBeginNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.GameBeginNtf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 rid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());

    // required uint32 first = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->first());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameBeginNtf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.GameBeginNtf)
  GOOGLE_DCHECK_NE(&from, this);
  const GameBeginNtf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameBeginNtf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.GameBeginNtf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.GameBeginNtf)
    MergeFrom(*source);
  }
}

void GameBeginNtf::MergeFrom(const GameBeginNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.GameBeginNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      rid_ = from.rid_;
    }
    if (cached_has_bits & 0x00000002u) {
      first_ = from.first_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameBeginNtf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.GameBeginNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameBeginNtf::CopyFrom(const GameBeginNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.GameBeginNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameBeginNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GameBeginNtf::Swap(GameBeginNtf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameBeginNtf::InternalSwap(GameBeginNtf* other) {
  std::swap(rid_, other->rid_);
  std::swap(first_, other->first_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameBeginNtf::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameBeginNtf

// required uint32 rid = 1;
bool GameBeginNtf::has_rid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameBeginNtf::set_has_rid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameBeginNtf::clear_has_rid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameBeginNtf::clear_rid() {
  rid_ = 0u;
  clear_has_rid();
}
::google::protobuf::uint32 GameBeginNtf::rid() const {
  // @@protoc_insertion_point(field_get:room.GameBeginNtf.rid)
  return rid_;
}
void GameBeginNtf::set_rid(::google::protobuf::uint32 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:room.GameBeginNtf.rid)
}

// required uint32 first = 2;
bool GameBeginNtf::has_first() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameBeginNtf::set_has_first() {
  _has_bits_[0] |= 0x00000002u;
}
void GameBeginNtf::clear_has_first() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameBeginNtf::clear_first() {
  first_ = 0u;
  clear_has_first();
}
::google::protobuf::uint32 GameBeginNtf::first() const {
  // @@protoc_insertion_point(field_get:room.GameBeginNtf.first)
  return first_;
}
void GameBeginNtf::set_first(::google::protobuf::uint32 value) {
  set_has_first();
  first_ = value;
  // @@protoc_insertion_point(field_set:room.GameBeginNtf.first)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RestartNtf::kFirstFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RestartNtf::RestartNtf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.RestartNtf)
}
RestartNtf::RestartNtf(const RestartNtf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  first_ = from.first_;
  // @@protoc_insertion_point(copy_constructor:room.RestartNtf)
}

void RestartNtf::SharedCtor() {
  _cached_size_ = 0;
  first_ = 0u;
}

RestartNtf::~RestartNtf() {
  // @@protoc_insertion_point(destructor:room.RestartNtf)
  SharedDtor();
}

void RestartNtf::SharedDtor() {
}

void RestartNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RestartNtf::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RestartNtf& RestartNtf::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

RestartNtf* RestartNtf::New(::google::protobuf::Arena* arena) const {
  RestartNtf* n = new RestartNtf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RestartNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:room.RestartNtf)
  first_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RestartNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.RestartNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 first = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_first();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.RestartNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.RestartNtf)
  return false;
#undef DO_
}

void RestartNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.RestartNtf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 first = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->first(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.RestartNtf)
}

::google::protobuf::uint8* RestartNtf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.RestartNtf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 first = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->first(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.RestartNtf)
  return target;
}

size_t RestartNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.RestartNtf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 first = 1;
  if (has_first()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->first());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RestartNtf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.RestartNtf)
  GOOGLE_DCHECK_NE(&from, this);
  const RestartNtf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RestartNtf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.RestartNtf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.RestartNtf)
    MergeFrom(*source);
  }
}

void RestartNtf::MergeFrom(const RestartNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.RestartNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_first()) {
    set_first(from.first());
  }
}

void RestartNtf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.RestartNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestartNtf::CopyFrom(const RestartNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.RestartNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestartNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RestartNtf::Swap(RestartNtf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RestartNtf::InternalSwap(RestartNtf* other) {
  std::swap(first_, other->first_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RestartNtf::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RestartNtf

// required uint32 first = 1;
bool RestartNtf::has_first() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RestartNtf::set_has_first() {
  _has_bits_[0] |= 0x00000001u;
}
void RestartNtf::clear_has_first() {
  _has_bits_[0] &= ~0x00000001u;
}
void RestartNtf::clear_first() {
  first_ = 0u;
  clear_has_first();
}
::google::protobuf::uint32 RestartNtf::first() const {
  // @@protoc_insertion_point(field_get:room.RestartNtf.first)
  return first_;
}
void RestartNtf::set_first(::google::protobuf::uint32 value) {
  set_has_first();
  first_ = value;
  // @@protoc_insertion_point(field_set:room.RestartNtf.first)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutCardNtf::kUidFieldNumber;
const int PutCardNtf::kCidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutCardNtf::PutCardNtf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.PutCardNtf)
}
PutCardNtf::PutCardNtf(const PutCardNtf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cid_(from.cid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:room.PutCardNtf)
}

void PutCardNtf::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
}

PutCardNtf::~PutCardNtf() {
  // @@protoc_insertion_point(destructor:room.PutCardNtf)
  SharedDtor();
}

void PutCardNtf::SharedDtor() {
}

void PutCardNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutCardNtf::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PutCardNtf& PutCardNtf::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

PutCardNtf* PutCardNtf::New(::google::protobuf::Arena* arena) const {
  PutCardNtf* n = new PutCardNtf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutCardNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:room.PutCardNtf)
  cid_.Clear();
  uid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PutCardNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.PutCardNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 cid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_cid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.PutCardNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.PutCardNtf)
  return false;
#undef DO_
}

void PutCardNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.PutCardNtf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // repeated uint32 cid = 2;
  for (int i = 0, n = this->cid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->cid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.PutCardNtf)
}

::google::protobuf::uint8* PutCardNtf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.PutCardNtf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // repeated uint32 cid = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->cid_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.PutCardNtf)
  return target;
}

size_t PutCardNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.PutCardNtf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 uid = 1;
  if (has_uid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }
  // repeated uint32 cid = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->cid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cid_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutCardNtf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.PutCardNtf)
  GOOGLE_DCHECK_NE(&from, this);
  const PutCardNtf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PutCardNtf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.PutCardNtf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.PutCardNtf)
    MergeFrom(*source);
  }
}

void PutCardNtf::MergeFrom(const PutCardNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.PutCardNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cid_.MergeFrom(from.cid_);
  if (from.has_uid()) {
    set_uid(from.uid());
  }
}

void PutCardNtf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.PutCardNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutCardNtf::CopyFrom(const PutCardNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.PutCardNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutCardNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PutCardNtf::Swap(PutCardNtf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutCardNtf::InternalSwap(PutCardNtf* other) {
  cid_.InternalSwap(&other->cid_);
  std::swap(uid_, other->uid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutCardNtf::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PutCardNtf

// required uint32 uid = 1;
bool PutCardNtf::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PutCardNtf::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void PutCardNtf::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PutCardNtf::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
::google::protobuf::uint32 PutCardNtf::uid() const {
  // @@protoc_insertion_point(field_get:room.PutCardNtf.uid)
  return uid_;
}
void PutCardNtf::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:room.PutCardNtf.uid)
}

// repeated uint32 cid = 2;
int PutCardNtf::cid_size() const {
  return cid_.size();
}
void PutCardNtf::clear_cid() {
  cid_.Clear();
}
::google::protobuf::uint32 PutCardNtf::cid(int index) const {
  // @@protoc_insertion_point(field_get:room.PutCardNtf.cid)
  return cid_.Get(index);
}
void PutCardNtf::set_cid(int index, ::google::protobuf::uint32 value) {
  cid_.Set(index, value);
  // @@protoc_insertion_point(field_set:room.PutCardNtf.cid)
}
void PutCardNtf::add_cid(::google::protobuf::uint32 value) {
  cid_.Add(value);
  // @@protoc_insertion_point(field_add:room.PutCardNtf.cid)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PutCardNtf::cid() const {
  // @@protoc_insertion_point(field_list:room.PutCardNtf.cid)
  return cid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PutCardNtf::mutable_cid() {
  // @@protoc_insertion_point(field_mutable_list:room.PutCardNtf.cid)
  return &cid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutLandlordCardNtf::kLandlordFieldNumber;
const int PutLandlordCardNtf::kCidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutLandlordCardNtf::PutLandlordCardNtf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.PutLandlordCardNtf)
}
PutLandlordCardNtf::PutLandlordCardNtf(const PutLandlordCardNtf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cid_(from.cid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  landlord_ = from.landlord_;
  // @@protoc_insertion_point(copy_constructor:room.PutLandlordCardNtf)
}

void PutLandlordCardNtf::SharedCtor() {
  _cached_size_ = 0;
  landlord_ = 0u;
}

PutLandlordCardNtf::~PutLandlordCardNtf() {
  // @@protoc_insertion_point(destructor:room.PutLandlordCardNtf)
  SharedDtor();
}

void PutLandlordCardNtf::SharedDtor() {
}

void PutLandlordCardNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutLandlordCardNtf::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PutLandlordCardNtf& PutLandlordCardNtf::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

PutLandlordCardNtf* PutLandlordCardNtf::New(::google::protobuf::Arena* arena) const {
  PutLandlordCardNtf* n = new PutLandlordCardNtf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutLandlordCardNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:room.PutLandlordCardNtf)
  cid_.Clear();
  landlord_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PutLandlordCardNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.PutLandlordCardNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 landlord = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_landlord();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &landlord_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 cid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_cid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.PutLandlordCardNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.PutLandlordCardNtf)
  return false;
#undef DO_
}

void PutLandlordCardNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.PutLandlordCardNtf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 landlord = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->landlord(), output);
  }

  // repeated uint32 cid = 2;
  for (int i = 0, n = this->cid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->cid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.PutLandlordCardNtf)
}

::google::protobuf::uint8* PutLandlordCardNtf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.PutLandlordCardNtf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 landlord = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->landlord(), target);
  }

  // repeated uint32 cid = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->cid_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.PutLandlordCardNtf)
  return target;
}

size_t PutLandlordCardNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.PutLandlordCardNtf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 landlord = 1;
  if (has_landlord()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->landlord());
  }
  // repeated uint32 cid = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->cid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cid_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutLandlordCardNtf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.PutLandlordCardNtf)
  GOOGLE_DCHECK_NE(&from, this);
  const PutLandlordCardNtf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PutLandlordCardNtf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.PutLandlordCardNtf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.PutLandlordCardNtf)
    MergeFrom(*source);
  }
}

void PutLandlordCardNtf::MergeFrom(const PutLandlordCardNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.PutLandlordCardNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cid_.MergeFrom(from.cid_);
  if (from.has_landlord()) {
    set_landlord(from.landlord());
  }
}

void PutLandlordCardNtf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.PutLandlordCardNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutLandlordCardNtf::CopyFrom(const PutLandlordCardNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.PutLandlordCardNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutLandlordCardNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PutLandlordCardNtf::Swap(PutLandlordCardNtf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutLandlordCardNtf::InternalSwap(PutLandlordCardNtf* other) {
  cid_.InternalSwap(&other->cid_);
  std::swap(landlord_, other->landlord_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutLandlordCardNtf::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PutLandlordCardNtf

// required uint32 landlord = 1;
bool PutLandlordCardNtf::has_landlord() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PutLandlordCardNtf::set_has_landlord() {
  _has_bits_[0] |= 0x00000001u;
}
void PutLandlordCardNtf::clear_has_landlord() {
  _has_bits_[0] &= ~0x00000001u;
}
void PutLandlordCardNtf::clear_landlord() {
  landlord_ = 0u;
  clear_has_landlord();
}
::google::protobuf::uint32 PutLandlordCardNtf::landlord() const {
  // @@protoc_insertion_point(field_get:room.PutLandlordCardNtf.landlord)
  return landlord_;
}
void PutLandlordCardNtf::set_landlord(::google::protobuf::uint32 value) {
  set_has_landlord();
  landlord_ = value;
  // @@protoc_insertion_point(field_set:room.PutLandlordCardNtf.landlord)
}

// repeated uint32 cid = 2;
int PutLandlordCardNtf::cid_size() const {
  return cid_.size();
}
void PutLandlordCardNtf::clear_cid() {
  cid_.Clear();
}
::google::protobuf::uint32 PutLandlordCardNtf::cid(int index) const {
  // @@protoc_insertion_point(field_get:room.PutLandlordCardNtf.cid)
  return cid_.Get(index);
}
void PutLandlordCardNtf::set_cid(int index, ::google::protobuf::uint32 value) {
  cid_.Set(index, value);
  // @@protoc_insertion_point(field_set:room.PutLandlordCardNtf.cid)
}
void PutLandlordCardNtf::add_cid(::google::protobuf::uint32 value) {
  cid_.Add(value);
  // @@protoc_insertion_point(field_add:room.PutLandlordCardNtf.cid)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PutLandlordCardNtf::cid() const {
  // @@protoc_insertion_point(field_list:room.PutLandlordCardNtf.cid)
  return cid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PutLandlordCardNtf::mutable_cid() {
  // @@protoc_insertion_point(field_mutable_list:room.PutLandlordCardNtf.cid)
  return &cid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LandlordNtf::kCindexFieldNumber;
const int LandlordNtf::kNindexFieldNumber;
const int LandlordNtf::kCallFieldNumber;
const int LandlordNtf::kCtypeFieldNumber;
const int LandlordNtf::kNtypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LandlordNtf::LandlordNtf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.LandlordNtf)
}
LandlordNtf::LandlordNtf(const LandlordNtf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cindex_, &from.cindex_,
    reinterpret_cast<char*>(&ntype_) -
    reinterpret_cast<char*>(&cindex_) + sizeof(ntype_));
  // @@protoc_insertion_point(copy_constructor:room.LandlordNtf)
}

void LandlordNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cindex_, 0, reinterpret_cast<char*>(&ntype_) -
    reinterpret_cast<char*>(&cindex_) + sizeof(ntype_));
}

LandlordNtf::~LandlordNtf() {
  // @@protoc_insertion_point(destructor:room.LandlordNtf)
  SharedDtor();
}

void LandlordNtf::SharedDtor() {
}

void LandlordNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandlordNtf::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LandlordNtf& LandlordNtf::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

LandlordNtf* LandlordNtf::New(::google::protobuf::Arena* arena) const {
  LandlordNtf* n = new LandlordNtf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LandlordNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:room.LandlordNtf)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&cindex_, 0, reinterpret_cast<char*>(&ntype_) -
      reinterpret_cast<char*>(&cindex_) + sizeof(ntype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LandlordNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.LandlordNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cindex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 nindex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_nindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool call = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_call();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &call_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool ctype = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ctype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ctype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool ntype = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_ntype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ntype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.LandlordNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.LandlordNtf)
  return false;
#undef DO_
}

void LandlordNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.LandlordNtf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 cindex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cindex(), output);
  }

  // required uint32 nindex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nindex(), output);
  }

  // required bool call = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->call(), output);
  }

  // required bool ctype = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ctype(), output);
  }

  // required bool ntype = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ntype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.LandlordNtf)
}

::google::protobuf::uint8* LandlordNtf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.LandlordNtf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 cindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cindex(), target);
  }

  // required uint32 nindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nindex(), target);
  }

  // required bool call = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->call(), target);
  }

  // required bool ctype = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ctype(), target);
  }

  // required bool ntype = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ntype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.LandlordNtf)
  return target;
}

size_t LandlordNtf::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:room.LandlordNtf)
  size_t total_size = 0;

  if (has_cindex()) {
    // required uint32 cindex = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cindex());
  }

  if (has_nindex()) {
    // required uint32 nindex = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nindex());
  }

  if (has_call()) {
    // required bool call = 3;
    total_size += 1 + 1;
  }

  if (has_ctype()) {
    // required bool ctype = 4;
    total_size += 1 + 1;
  }

  if (has_ntype()) {
    // required bool ntype = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t LandlordNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.LandlordNtf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 cindex = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cindex());

    // required uint32 nindex = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nindex());

    // required bool call = 3;
    total_size += 1 + 1;

    // required bool ctype = 4;
    total_size += 1 + 1;

    // required bool ntype = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandlordNtf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.LandlordNtf)
  GOOGLE_DCHECK_NE(&from, this);
  const LandlordNtf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LandlordNtf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.LandlordNtf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.LandlordNtf)
    MergeFrom(*source);
  }
}

void LandlordNtf::MergeFrom(const LandlordNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.LandlordNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      cindex_ = from.cindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      nindex_ = from.nindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      call_ = from.call_;
    }
    if (cached_has_bits & 0x00000008u) {
      ctype_ = from.ctype_;
    }
    if (cached_has_bits & 0x00000010u) {
      ntype_ = from.ntype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LandlordNtf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.LandlordNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandlordNtf::CopyFrom(const LandlordNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.LandlordNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandlordNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void LandlordNtf::Swap(LandlordNtf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LandlordNtf::InternalSwap(LandlordNtf* other) {
  std::swap(cindex_, other->cindex_);
  std::swap(nindex_, other->nindex_);
  std::swap(call_, other->call_);
  std::swap(ctype_, other->ctype_);
  std::swap(ntype_, other->ntype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LandlordNtf::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LandlordNtf

// required uint32 cindex = 1;
bool LandlordNtf::has_cindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LandlordNtf::set_has_cindex() {
  _has_bits_[0] |= 0x00000001u;
}
void LandlordNtf::clear_has_cindex() {
  _has_bits_[0] &= ~0x00000001u;
}
void LandlordNtf::clear_cindex() {
  cindex_ = 0u;
  clear_has_cindex();
}
::google::protobuf::uint32 LandlordNtf::cindex() const {
  // @@protoc_insertion_point(field_get:room.LandlordNtf.cindex)
  return cindex_;
}
void LandlordNtf::set_cindex(::google::protobuf::uint32 value) {
  set_has_cindex();
  cindex_ = value;
  // @@protoc_insertion_point(field_set:room.LandlordNtf.cindex)
}

// required uint32 nindex = 2;
bool LandlordNtf::has_nindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LandlordNtf::set_has_nindex() {
  _has_bits_[0] |= 0x00000002u;
}
void LandlordNtf::clear_has_nindex() {
  _has_bits_[0] &= ~0x00000002u;
}
void LandlordNtf::clear_nindex() {
  nindex_ = 0u;
  clear_has_nindex();
}
::google::protobuf::uint32 LandlordNtf::nindex() const {
  // @@protoc_insertion_point(field_get:room.LandlordNtf.nindex)
  return nindex_;
}
void LandlordNtf::set_nindex(::google::protobuf::uint32 value) {
  set_has_nindex();
  nindex_ = value;
  // @@protoc_insertion_point(field_set:room.LandlordNtf.nindex)
}

// required bool call = 3;
bool LandlordNtf::has_call() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LandlordNtf::set_has_call() {
  _has_bits_[0] |= 0x00000004u;
}
void LandlordNtf::clear_has_call() {
  _has_bits_[0] &= ~0x00000004u;
}
void LandlordNtf::clear_call() {
  call_ = false;
  clear_has_call();
}
bool LandlordNtf::call() const {
  // @@protoc_insertion_point(field_get:room.LandlordNtf.call)
  return call_;
}
void LandlordNtf::set_call(bool value) {
  set_has_call();
  call_ = value;
  // @@protoc_insertion_point(field_set:room.LandlordNtf.call)
}

// required bool ctype = 4;
bool LandlordNtf::has_ctype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LandlordNtf::set_has_ctype() {
  _has_bits_[0] |= 0x00000008u;
}
void LandlordNtf::clear_has_ctype() {
  _has_bits_[0] &= ~0x00000008u;
}
void LandlordNtf::clear_ctype() {
  ctype_ = false;
  clear_has_ctype();
}
bool LandlordNtf::ctype() const {
  // @@protoc_insertion_point(field_get:room.LandlordNtf.ctype)
  return ctype_;
}
void LandlordNtf::set_ctype(bool value) {
  set_has_ctype();
  ctype_ = value;
  // @@protoc_insertion_point(field_set:room.LandlordNtf.ctype)
}

// required bool ntype = 5;
bool LandlordNtf::has_ntype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LandlordNtf::set_has_ntype() {
  _has_bits_[0] |= 0x00000010u;
}
void LandlordNtf::clear_has_ntype() {
  _has_bits_[0] &= ~0x00000010u;
}
void LandlordNtf::clear_ntype() {
  ntype_ = false;
  clear_has_ntype();
}
bool LandlordNtf::ntype() const {
  // @@protoc_insertion_point(field_get:room.LandlordNtf.ntype)
  return ntype_;
}
void LandlordNtf::set_ntype(bool value) {
  set_has_ntype();
  ntype_ = value;
  // @@protoc_insertion_point(field_set:room.LandlordNtf.ntype)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LandlordReq::kUidFieldNumber;
const int LandlordReq::kRidFieldNumber;
const int LandlordReq::kCallFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LandlordReq::LandlordReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.LandlordReq)
}
LandlordReq::LandlordReq(const LandlordReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    reinterpret_cast<char*>(&call_) -
    reinterpret_cast<char*>(&uid_) + sizeof(call_));
  // @@protoc_insertion_point(copy_constructor:room.LandlordReq)
}

void LandlordReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&uid_, 0, reinterpret_cast<char*>(&call_) -
    reinterpret_cast<char*>(&uid_) + sizeof(call_));
}

LandlordReq::~LandlordReq() {
  // @@protoc_insertion_point(destructor:room.LandlordReq)
  SharedDtor();
}

void LandlordReq::SharedDtor() {
}

void LandlordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandlordReq::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LandlordReq& LandlordReq::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

LandlordReq* LandlordReq::New(::google::protobuf::Arena* arena) const {
  LandlordReq* n = new LandlordReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LandlordReq::Clear() {
// @@protoc_insertion_point(message_clear_start:room.LandlordReq)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&uid_, 0, reinterpret_cast<char*>(&call_) -
      reinterpret_cast<char*>(&uid_) + sizeof(call_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LandlordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.LandlordReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 rid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_rid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool call = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_call();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &call_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.LandlordReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.LandlordReq)
  return false;
#undef DO_
}

void LandlordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.LandlordReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 rid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rid(), output);
  }

  // required bool call = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->call(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.LandlordReq)
}

::google::protobuf::uint8* LandlordReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.LandlordReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 rid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rid(), target);
  }

  // required bool call = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->call(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.LandlordReq)
  return target;
}

size_t LandlordReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:room.LandlordReq)
  size_t total_size = 0;

  if (has_uid()) {
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  if (has_rid()) {
    // required uint32 rid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());
  }

  if (has_call()) {
    // required bool call = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t LandlordReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.LandlordReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

    // required uint32 rid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());

    // required bool call = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandlordReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.LandlordReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LandlordReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LandlordReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.LandlordReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.LandlordReq)
    MergeFrom(*source);
  }
}

void LandlordReq::MergeFrom(const LandlordReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.LandlordReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000002u) {
      rid_ = from.rid_;
    }
    if (cached_has_bits & 0x00000004u) {
      call_ = from.call_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LandlordReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.LandlordReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandlordReq::CopyFrom(const LandlordReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.LandlordReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandlordReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void LandlordReq::Swap(LandlordReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LandlordReq::InternalSwap(LandlordReq* other) {
  std::swap(uid_, other->uid_);
  std::swap(rid_, other->rid_);
  std::swap(call_, other->call_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LandlordReq::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LandlordReq

// required uint32 uid = 1;
bool LandlordReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LandlordReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void LandlordReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void LandlordReq::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
::google::protobuf::uint32 LandlordReq::uid() const {
  // @@protoc_insertion_point(field_get:room.LandlordReq.uid)
  return uid_;
}
void LandlordReq::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:room.LandlordReq.uid)
}

// required uint32 rid = 2;
bool LandlordReq::has_rid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LandlordReq::set_has_rid() {
  _has_bits_[0] |= 0x00000002u;
}
void LandlordReq::clear_has_rid() {
  _has_bits_[0] &= ~0x00000002u;
}
void LandlordReq::clear_rid() {
  rid_ = 0u;
  clear_has_rid();
}
::google::protobuf::uint32 LandlordReq::rid() const {
  // @@protoc_insertion_point(field_get:room.LandlordReq.rid)
  return rid_;
}
void LandlordReq::set_rid(::google::protobuf::uint32 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:room.LandlordReq.rid)
}

// required bool call = 3;
bool LandlordReq::has_call() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LandlordReq::set_has_call() {
  _has_bits_[0] |= 0x00000004u;
}
void LandlordReq::clear_has_call() {
  _has_bits_[0] &= ~0x00000004u;
}
void LandlordReq::clear_call() {
  call_ = false;
  clear_has_call();
}
bool LandlordReq::call() const {
  // @@protoc_insertion_point(field_get:room.LandlordReq.call)
  return call_;
}
void LandlordReq::set_call(bool value) {
  set_has_call();
  call_ = value;
  // @@protoc_insertion_point(field_set:room.LandlordReq.call)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LandlordResp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LandlordResp::LandlordResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.LandlordResp)
}
LandlordResp::LandlordResp(const LandlordResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:room.LandlordResp)
}

void LandlordResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

LandlordResp::~LandlordResp() {
  // @@protoc_insertion_point(destructor:room.LandlordResp)
  SharedDtor();
}

void LandlordResp::SharedDtor() {
}

void LandlordResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandlordResp::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LandlordResp& LandlordResp::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

LandlordResp* LandlordResp::New(::google::protobuf::Arena* arena) const {
  LandlordResp* n = new LandlordResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LandlordResp::Clear() {
// @@protoc_insertion_point(message_clear_start:room.LandlordResp)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LandlordResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.LandlordResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .base.ERROR_CODE result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::base::ERROR_CODE_IsValid(value)) {
            set_result(static_cast< ::base::ERROR_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.LandlordResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.LandlordResp)
  return false;
#undef DO_
}

void LandlordResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.LandlordResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .base.ERROR_CODE result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.LandlordResp)
}

::google::protobuf::uint8* LandlordResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.LandlordResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .base.ERROR_CODE result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.LandlordResp)
  return target;
}

size_t LandlordResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.LandlordResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .base.ERROR_CODE result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandlordResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.LandlordResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LandlordResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LandlordResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.LandlordResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.LandlordResp)
    MergeFrom(*source);
  }
}

void LandlordResp::MergeFrom(const LandlordResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.LandlordResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void LandlordResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.LandlordResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandlordResp::CopyFrom(const LandlordResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.LandlordResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandlordResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void LandlordResp::Swap(LandlordResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LandlordResp::InternalSwap(LandlordResp* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LandlordResp::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LandlordResp

// required .base.ERROR_CODE result = 1;
bool LandlordResp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LandlordResp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void LandlordResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void LandlordResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
::base::ERROR_CODE LandlordResp::result() const {
  // @@protoc_insertion_point(field_get:room.LandlordResp.result)
  return static_cast< ::base::ERROR_CODE >(result_);
}
void LandlordResp::set_result(::base::ERROR_CODE value) {
  assert(::base::ERROR_CODE_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:room.LandlordResp.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayReq::kUidFieldNumber;
const int PlayReq::kRidFieldNumber;
const int PlayReq::kCidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayReq::PlayReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.PlayReq)
}
PlayReq::PlayReq(const PlayReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cid_(from.cid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    reinterpret_cast<char*>(&rid_) -
    reinterpret_cast<char*>(&uid_) + sizeof(rid_));
  // @@protoc_insertion_point(copy_constructor:room.PlayReq)
}

void PlayReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&uid_, 0, reinterpret_cast<char*>(&rid_) -
    reinterpret_cast<char*>(&uid_) + sizeof(rid_));
}

PlayReq::~PlayReq() {
  // @@protoc_insertion_point(destructor:room.PlayReq)
  SharedDtor();
}

void PlayReq::SharedDtor() {
}

void PlayReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayReq::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayReq& PlayReq::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayReq* PlayReq::New(::google::protobuf::Arena* arena) const {
  PlayReq* n = new PlayReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayReq::Clear() {
// @@protoc_insertion_point(message_clear_start:room.PlayReq)
  cid_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&uid_, 0, reinterpret_cast<char*>(&rid_) -
      reinterpret_cast<char*>(&uid_) + sizeof(rid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.PlayReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 rid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_rid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 cid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_cid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.PlayReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.PlayReq)
  return false;
#undef DO_
}

void PlayReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.PlayReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 rid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rid(), output);
  }

  // repeated uint32 cid = 3;
  for (int i = 0, n = this->cid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->cid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.PlayReq)
}

::google::protobuf::uint8* PlayReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.PlayReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 rid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rid(), target);
  }

  // repeated uint32 cid = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->cid_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.PlayReq)
  return target;
}

size_t PlayReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:room.PlayReq)
  size_t total_size = 0;

  if (has_uid()) {
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  if (has_rid()) {
    // required uint32 rid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());
  }

  return total_size;
}
size_t PlayReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.PlayReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

    // required uint32 rid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 cid = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->cid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cid_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.PlayReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.PlayReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.PlayReq)
    MergeFrom(*source);
  }
}

void PlayReq::MergeFrom(const PlayReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.PlayReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cid_.MergeFrom(from.cid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000002u) {
      rid_ = from.rid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.PlayReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayReq::CopyFrom(const PlayReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.PlayReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PlayReq::Swap(PlayReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayReq::InternalSwap(PlayReq* other) {
  cid_.InternalSwap(&other->cid_);
  std::swap(uid_, other->uid_);
  std::swap(rid_, other->rid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayReq::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayReq

// required uint32 uid = 1;
bool PlayReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayReq::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
::google::protobuf::uint32 PlayReq::uid() const {
  // @@protoc_insertion_point(field_get:room.PlayReq.uid)
  return uid_;
}
void PlayReq::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:room.PlayReq.uid)
}

// required uint32 rid = 2;
bool PlayReq::has_rid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayReq::set_has_rid() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayReq::clear_has_rid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayReq::clear_rid() {
  rid_ = 0u;
  clear_has_rid();
}
::google::protobuf::uint32 PlayReq::rid() const {
  // @@protoc_insertion_point(field_get:room.PlayReq.rid)
  return rid_;
}
void PlayReq::set_rid(::google::protobuf::uint32 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:room.PlayReq.rid)
}

// repeated uint32 cid = 3;
int PlayReq::cid_size() const {
  return cid_.size();
}
void PlayReq::clear_cid() {
  cid_.Clear();
}
::google::protobuf::uint32 PlayReq::cid(int index) const {
  // @@protoc_insertion_point(field_get:room.PlayReq.cid)
  return cid_.Get(index);
}
void PlayReq::set_cid(int index, ::google::protobuf::uint32 value) {
  cid_.Set(index, value);
  // @@protoc_insertion_point(field_set:room.PlayReq.cid)
}
void PlayReq::add_cid(::google::protobuf::uint32 value) {
  cid_.Add(value);
  // @@protoc_insertion_point(field_add:room.PlayReq.cid)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlayReq::cid() const {
  // @@protoc_insertion_point(field_list:room.PlayReq.cid)
  return cid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlayReq::mutable_cid() {
  // @@protoc_insertion_point(field_mutable_list:room.PlayReq.cid)
  return &cid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayResp::kResultFieldNumber;
const int PlayResp::kNextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayResp::PlayResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.PlayResp)
}
PlayResp::PlayResp(const PlayResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&next_) -
    reinterpret_cast<char*>(&result_) + sizeof(next_));
  // @@protoc_insertion_point(copy_constructor:room.PlayResp)
}

void PlayResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&result_, 0, reinterpret_cast<char*>(&next_) -
    reinterpret_cast<char*>(&result_) + sizeof(next_));
}

PlayResp::~PlayResp() {
  // @@protoc_insertion_point(destructor:room.PlayResp)
  SharedDtor();
}

void PlayResp::SharedDtor() {
}

void PlayResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayResp::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayResp& PlayResp::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayResp* PlayResp::New(::google::protobuf::Arena* arena) const {
  PlayResp* n = new PlayResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayResp::Clear() {
// @@protoc_insertion_point(message_clear_start:room.PlayResp)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&result_, 0, reinterpret_cast<char*>(&next_) -
      reinterpret_cast<char*>(&result_) + sizeof(next_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.PlayResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .base.ERROR_CODE result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::base::ERROR_CODE_IsValid(value)) {
            set_result(static_cast< ::base::ERROR_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 next = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_next();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.PlayResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.PlayResp)
  return false;
#undef DO_
}

void PlayResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.PlayResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .base.ERROR_CODE result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 next = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->next(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.PlayResp)
}

::google::protobuf::uint8* PlayResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.PlayResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .base.ERROR_CODE result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 next = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->next(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.PlayResp)
  return target;
}

size_t PlayResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.PlayResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .base.ERROR_CODE result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }
  // optional uint32 next = 2;
  if (has_next()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->next());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.PlayResp)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.PlayResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.PlayResp)
    MergeFrom(*source);
  }
}

void PlayResp::MergeFrom(const PlayResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.PlayResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      next_ = from.next_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.PlayResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayResp::CopyFrom(const PlayResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.PlayResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PlayResp::Swap(PlayResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayResp::InternalSwap(PlayResp* other) {
  std::swap(result_, other->result_);
  std::swap(next_, other->next_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayResp::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayResp

// required .base.ERROR_CODE result = 1;
bool PlayResp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayResp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
::base::ERROR_CODE PlayResp::result() const {
  // @@protoc_insertion_point(field_get:room.PlayResp.result)
  return static_cast< ::base::ERROR_CODE >(result_);
}
void PlayResp::set_result(::base::ERROR_CODE value) {
  assert(::base::ERROR_CODE_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:room.PlayResp.result)
}

// optional uint32 next = 2;
bool PlayResp::has_next() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayResp::set_has_next() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayResp::clear_has_next() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayResp::clear_next() {
  next_ = 0u;
  clear_has_next();
}
::google::protobuf::uint32 PlayResp::next() const {
  // @@protoc_insertion_point(field_get:room.PlayResp.next)
  return next_;
}
void PlayResp::set_next(::google::protobuf::uint32 value) {
  set_has_next();
  next_ = value;
  // @@protoc_insertion_point(field_set:room.PlayResp.next)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayNtf::kCurrentFieldNumber;
const int PlayNtf::kNextFieldNumber;
const int PlayNtf::kCidFieldNumber;
const int PlayNtf::kMultipleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayNtf::PlayNtf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.PlayNtf)
}
PlayNtf::PlayNtf(const PlayNtf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cid_(from.cid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&current_, &from.current_,
    reinterpret_cast<char*>(&multiple_) -
    reinterpret_cast<char*>(&current_) + sizeof(multiple_));
  // @@protoc_insertion_point(copy_constructor:room.PlayNtf)
}

void PlayNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&current_, 0, reinterpret_cast<char*>(&multiple_) -
    reinterpret_cast<char*>(&current_) + sizeof(multiple_));
}

PlayNtf::~PlayNtf() {
  // @@protoc_insertion_point(destructor:room.PlayNtf)
  SharedDtor();
}

void PlayNtf::SharedDtor() {
}

void PlayNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayNtf::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayNtf& PlayNtf::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayNtf* PlayNtf::New(::google::protobuf::Arena* arena) const {
  PlayNtf* n = new PlayNtf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:room.PlayNtf)
  cid_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&current_, 0, reinterpret_cast<char*>(&multiple_) -
      reinterpret_cast<char*>(&current_) + sizeof(multiple_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.PlayNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 current = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_current();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 next = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_next();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 cid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_cid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 multiple = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_multiple();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.PlayNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.PlayNtf)
  return false;
#undef DO_
}

void PlayNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.PlayNtf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 current = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->current(), output);
  }

  // required uint32 next = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->next(), output);
  }

  // repeated uint32 cid = 3;
  for (int i = 0, n = this->cid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->cid(i), output);
  }

  // required uint32 multiple = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->multiple(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.PlayNtf)
}

::google::protobuf::uint8* PlayNtf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.PlayNtf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 current = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->current(), target);
  }

  // required uint32 next = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->next(), target);
  }

  // repeated uint32 cid = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->cid_, target);

  // required uint32 multiple = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->multiple(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.PlayNtf)
  return target;
}

size_t PlayNtf::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:room.PlayNtf)
  size_t total_size = 0;

  if (has_current()) {
    // required uint32 current = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->current());
  }

  if (has_next()) {
    // required uint32 next = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->next());
  }

  if (has_multiple()) {
    // required uint32 multiple = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->multiple());
  }

  return total_size;
}
size_t PlayNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.PlayNtf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 current = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->current());

    // required uint32 next = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->next());

    // required uint32 multiple = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->multiple());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 cid = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->cid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cid_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayNtf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.PlayNtf)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayNtf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayNtf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.PlayNtf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.PlayNtf)
    MergeFrom(*source);
  }
}

void PlayNtf::MergeFrom(const PlayNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.PlayNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cid_.MergeFrom(from.cid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      current_ = from.current_;
    }
    if (cached_has_bits & 0x00000002u) {
      next_ = from.next_;
    }
    if (cached_has_bits & 0x00000004u) {
      multiple_ = from.multiple_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayNtf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.PlayNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayNtf::CopyFrom(const PlayNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.PlayNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void PlayNtf::Swap(PlayNtf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayNtf::InternalSwap(PlayNtf* other) {
  cid_.InternalSwap(&other->cid_);
  std::swap(current_, other->current_);
  std::swap(next_, other->next_);
  std::swap(multiple_, other->multiple_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayNtf::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayNtf

// required uint32 current = 1;
bool PlayNtf::has_current() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayNtf::set_has_current() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayNtf::clear_has_current() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayNtf::clear_current() {
  current_ = 0u;
  clear_has_current();
}
::google::protobuf::uint32 PlayNtf::current() const {
  // @@protoc_insertion_point(field_get:room.PlayNtf.current)
  return current_;
}
void PlayNtf::set_current(::google::protobuf::uint32 value) {
  set_has_current();
  current_ = value;
  // @@protoc_insertion_point(field_set:room.PlayNtf.current)
}

// required uint32 next = 2;
bool PlayNtf::has_next() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayNtf::set_has_next() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayNtf::clear_has_next() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayNtf::clear_next() {
  next_ = 0u;
  clear_has_next();
}
::google::protobuf::uint32 PlayNtf::next() const {
  // @@protoc_insertion_point(field_get:room.PlayNtf.next)
  return next_;
}
void PlayNtf::set_next(::google::protobuf::uint32 value) {
  set_has_next();
  next_ = value;
  // @@protoc_insertion_point(field_set:room.PlayNtf.next)
}

// repeated uint32 cid = 3;
int PlayNtf::cid_size() const {
  return cid_.size();
}
void PlayNtf::clear_cid() {
  cid_.Clear();
}
::google::protobuf::uint32 PlayNtf::cid(int index) const {
  // @@protoc_insertion_point(field_get:room.PlayNtf.cid)
  return cid_.Get(index);
}
void PlayNtf::set_cid(int index, ::google::protobuf::uint32 value) {
  cid_.Set(index, value);
  // @@protoc_insertion_point(field_set:room.PlayNtf.cid)
}
void PlayNtf::add_cid(::google::protobuf::uint32 value) {
  cid_.Add(value);
  // @@protoc_insertion_point(field_add:room.PlayNtf.cid)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlayNtf::cid() const {
  // @@protoc_insertion_point(field_list:room.PlayNtf.cid)
  return cid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlayNtf::mutable_cid() {
  // @@protoc_insertion_point(field_mutable_list:room.PlayNtf.cid)
  return &cid_;
}

// required uint32 multiple = 4;
bool PlayNtf::has_multiple() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayNtf::set_has_multiple() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayNtf::clear_has_multiple() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayNtf::clear_multiple() {
  multiple_ = 0u;
  clear_has_multiple();
}
::google::protobuf::uint32 PlayNtf::multiple() const {
  // @@protoc_insertion_point(field_get:room.PlayNtf.multiple)
  return multiple_;
}
void PlayNtf::set_multiple(::google::protobuf::uint32 value) {
  set_has_multiple();
  multiple_ = value;
  // @@protoc_insertion_point(field_set:room.PlayNtf.multiple)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameOverNtf::kRidFieldNumber;
const int GameOverNtf::kWinnerFieldNumber;
const int GameOverNtf::kLandlordFieldNumber;
const int GameOverNtf::kMultipleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameOverNtf::GameOverNtf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.GameOverNtf)
}
GameOverNtf::GameOverNtf(const GameOverNtf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rid_, &from.rid_,
    reinterpret_cast<char*>(&multiple_) -
    reinterpret_cast<char*>(&rid_) + sizeof(multiple_));
  // @@protoc_insertion_point(copy_constructor:room.GameOverNtf)
}

void GameOverNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rid_, 0, reinterpret_cast<char*>(&multiple_) -
    reinterpret_cast<char*>(&rid_) + sizeof(multiple_));
}

GameOverNtf::~GameOverNtf() {
  // @@protoc_insertion_point(destructor:room.GameOverNtf)
  SharedDtor();
}

void GameOverNtf::SharedDtor() {
}

void GameOverNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameOverNtf::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameOverNtf& GameOverNtf::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameOverNtf* GameOverNtf::New(::google::protobuf::Arena* arena) const {
  GameOverNtf* n = new GameOverNtf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameOverNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:room.GameOverNtf)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&rid_, 0, reinterpret_cast<char*>(&multiple_) -
      reinterpret_cast<char*>(&rid_) + sizeof(multiple_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameOverNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.GameOverNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_rid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 winner = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_winner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 landlord = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_landlord();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &landlord_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 multiple = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_multiple();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.GameOverNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.GameOverNtf)
  return false;
#undef DO_
}

void GameOverNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.GameOverNtf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 rid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rid(), output);
  }

  // required uint32 winner = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->winner(), output);
  }

  // required uint32 landlord = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->landlord(), output);
  }

  // required uint32 multiple = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->multiple(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.GameOverNtf)
}

::google::protobuf::uint8* GameOverNtf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.GameOverNtf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 rid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rid(), target);
  }

  // required uint32 winner = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->winner(), target);
  }

  // required uint32 landlord = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->landlord(), target);
  }

  // required uint32 multiple = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->multiple(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.GameOverNtf)
  return target;
}

size_t GameOverNtf::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:room.GameOverNtf)
  size_t total_size = 0;

  if (has_rid()) {
    // required uint32 rid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());
  }

  if (has_winner()) {
    // required uint32 winner = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->winner());
  }

  if (has_landlord()) {
    // required uint32 landlord = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->landlord());
  }

  if (has_multiple()) {
    // required uint32 multiple = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->multiple());
  }

  return total_size;
}
size_t GameOverNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.GameOverNtf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 rid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());

    // required uint32 winner = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->winner());

    // required uint32 landlord = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->landlord());

    // required uint32 multiple = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->multiple());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameOverNtf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.GameOverNtf)
  GOOGLE_DCHECK_NE(&from, this);
  const GameOverNtf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameOverNtf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.GameOverNtf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.GameOverNtf)
    MergeFrom(*source);
  }
}

void GameOverNtf::MergeFrom(const GameOverNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.GameOverNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      rid_ = from.rid_;
    }
    if (cached_has_bits & 0x00000002u) {
      winner_ = from.winner_;
    }
    if (cached_has_bits & 0x00000004u) {
      landlord_ = from.landlord_;
    }
    if (cached_has_bits & 0x00000008u) {
      multiple_ = from.multiple_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameOverNtf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.GameOverNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOverNtf::CopyFrom(const GameOverNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.GameOverNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOverNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void GameOverNtf::Swap(GameOverNtf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameOverNtf::InternalSwap(GameOverNtf* other) {
  std::swap(rid_, other->rid_);
  std::swap(winner_, other->winner_);
  std::swap(landlord_, other->landlord_);
  std::swap(multiple_, other->multiple_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameOverNtf::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameOverNtf

// required uint32 rid = 1;
bool GameOverNtf::has_rid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameOverNtf::set_has_rid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameOverNtf::clear_has_rid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameOverNtf::clear_rid() {
  rid_ = 0u;
  clear_has_rid();
}
::google::protobuf::uint32 GameOverNtf::rid() const {
  // @@protoc_insertion_point(field_get:room.GameOverNtf.rid)
  return rid_;
}
void GameOverNtf::set_rid(::google::protobuf::uint32 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:room.GameOverNtf.rid)
}

// required uint32 winner = 2;
bool GameOverNtf::has_winner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameOverNtf::set_has_winner() {
  _has_bits_[0] |= 0x00000002u;
}
void GameOverNtf::clear_has_winner() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameOverNtf::clear_winner() {
  winner_ = 0u;
  clear_has_winner();
}
::google::protobuf::uint32 GameOverNtf::winner() const {
  // @@protoc_insertion_point(field_get:room.GameOverNtf.winner)
  return winner_;
}
void GameOverNtf::set_winner(::google::protobuf::uint32 value) {
  set_has_winner();
  winner_ = value;
  // @@protoc_insertion_point(field_set:room.GameOverNtf.winner)
}

// required uint32 landlord = 3;
bool GameOverNtf::has_landlord() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameOverNtf::set_has_landlord() {
  _has_bits_[0] |= 0x00000004u;
}
void GameOverNtf::clear_has_landlord() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameOverNtf::clear_landlord() {
  landlord_ = 0u;
  clear_has_landlord();
}
::google::protobuf::uint32 GameOverNtf::landlord() const {
  // @@protoc_insertion_point(field_get:room.GameOverNtf.landlord)
  return landlord_;
}
void GameOverNtf::set_landlord(::google::protobuf::uint32 value) {
  set_has_landlord();
  landlord_ = value;
  // @@protoc_insertion_point(field_set:room.GameOverNtf.landlord)
}

// required uint32 multiple = 4;
bool GameOverNtf::has_multiple() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameOverNtf::set_has_multiple() {
  _has_bits_[0] |= 0x00000008u;
}
void GameOverNtf::clear_has_multiple() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameOverNtf::clear_multiple() {
  multiple_ = 0u;
  clear_has_multiple();
}
::google::protobuf::uint32 GameOverNtf::multiple() const {
  // @@protoc_insertion_point(field_get:room.GameOverNtf.multiple)
  return multiple_;
}
void GameOverNtf::set_multiple(::google::protobuf::uint32 value) {
  set_has_multiple();
  multiple_ = value;
  // @@protoc_insertion_point(field_set:room.GameOverNtf.multiple)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LostFromRoomMsg::kRidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LostFromRoomMsg::LostFromRoomMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.LostFromRoomMsg)
}
LostFromRoomMsg::LostFromRoomMsg(const LostFromRoomMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rid_ = from.rid_;
  // @@protoc_insertion_point(copy_constructor:room.LostFromRoomMsg)
}

void LostFromRoomMsg::SharedCtor() {
  _cached_size_ = 0;
  rid_ = 0u;
}

LostFromRoomMsg::~LostFromRoomMsg() {
  // @@protoc_insertion_point(destructor:room.LostFromRoomMsg)
  SharedDtor();
}

void LostFromRoomMsg::SharedDtor() {
}

void LostFromRoomMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LostFromRoomMsg::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LostFromRoomMsg& LostFromRoomMsg::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

LostFromRoomMsg* LostFromRoomMsg::New(::google::protobuf::Arena* arena) const {
  LostFromRoomMsg* n = new LostFromRoomMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LostFromRoomMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:room.LostFromRoomMsg)
  rid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LostFromRoomMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.LostFromRoomMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_rid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.LostFromRoomMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.LostFromRoomMsg)
  return false;
#undef DO_
}

void LostFromRoomMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.LostFromRoomMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 rid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.LostFromRoomMsg)
}

::google::protobuf::uint8* LostFromRoomMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.LostFromRoomMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 rid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.LostFromRoomMsg)
  return target;
}

size_t LostFromRoomMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.LostFromRoomMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 rid = 1;
  if (has_rid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LostFromRoomMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.LostFromRoomMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const LostFromRoomMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LostFromRoomMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.LostFromRoomMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.LostFromRoomMsg)
    MergeFrom(*source);
  }
}

void LostFromRoomMsg::MergeFrom(const LostFromRoomMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.LostFromRoomMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rid()) {
    set_rid(from.rid());
  }
}

void LostFromRoomMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.LostFromRoomMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LostFromRoomMsg::CopyFrom(const LostFromRoomMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.LostFromRoomMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LostFromRoomMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void LostFromRoomMsg::Swap(LostFromRoomMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LostFromRoomMsg::InternalSwap(LostFromRoomMsg* other) {
  std::swap(rid_, other->rid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LostFromRoomMsg::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LostFromRoomMsg

// required uint32 rid = 1;
bool LostFromRoomMsg::has_rid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LostFromRoomMsg::set_has_rid() {
  _has_bits_[0] |= 0x00000001u;
}
void LostFromRoomMsg::clear_has_rid() {
  _has_bits_[0] &= ~0x00000001u;
}
void LostFromRoomMsg::clear_rid() {
  rid_ = 0u;
  clear_has_rid();
}
::google::protobuf::uint32 LostFromRoomMsg::rid() const {
  // @@protoc_insertion_point(field_get:room.LostFromRoomMsg.rid)
  return rid_;
}
void LostFromRoomMsg::set_rid(::google::protobuf::uint32 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:room.LostFromRoomMsg.rid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReconnectReq::kRidFieldNumber;
const int ReconnectReq::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReconnectReq::ReconnectReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.ReconnectReq)
}
ReconnectReq::ReconnectReq(const ReconnectReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rid_, &from.rid_,
    reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&rid_) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:room.ReconnectReq)
}

void ReconnectReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rid_, 0, reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&rid_) + sizeof(uid_));
}

ReconnectReq::~ReconnectReq() {
  // @@protoc_insertion_point(destructor:room.ReconnectReq)
  SharedDtor();
}

void ReconnectReq::SharedDtor() {
}

void ReconnectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReconnectReq::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReconnectReq& ReconnectReq::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReconnectReq* ReconnectReq::New(::google::protobuf::Arena* arena) const {
  ReconnectReq* n = new ReconnectReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReconnectReq::Clear() {
// @@protoc_insertion_point(message_clear_start:room.ReconnectReq)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&rid_, 0, reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&rid_) + sizeof(uid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReconnectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.ReconnectReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_rid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.ReconnectReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.ReconnectReq)
  return false;
#undef DO_
}

void ReconnectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.ReconnectReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 rid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rid(), output);
  }

  // required uint32 uid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.ReconnectReq)
}

::google::protobuf::uint8* ReconnectReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.ReconnectReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 rid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rid(), target);
  }

  // required uint32 uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.ReconnectReq)
  return target;
}

size_t ReconnectReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:room.ReconnectReq)
  size_t total_size = 0;

  if (has_rid()) {
    // required uint32 rid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());
  }

  if (has_uid()) {
    // required uint32 uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  return total_size;
}
size_t ReconnectReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.ReconnectReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 rid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());

    // required uint32 uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReconnectReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.ReconnectReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ReconnectReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReconnectReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.ReconnectReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.ReconnectReq)
    MergeFrom(*source);
  }
}

void ReconnectReq::MergeFrom(const ReconnectReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.ReconnectReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      rid_ = from.rid_;
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReconnectReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.ReconnectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconnectReq::CopyFrom(const ReconnectReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.ReconnectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconnectReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ReconnectReq::Swap(ReconnectReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReconnectReq::InternalSwap(ReconnectReq* other) {
  std::swap(rid_, other->rid_);
  std::swap(uid_, other->uid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReconnectReq::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReconnectReq

// required uint32 rid = 1;
bool ReconnectReq::has_rid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReconnectReq::set_has_rid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReconnectReq::clear_has_rid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReconnectReq::clear_rid() {
  rid_ = 0u;
  clear_has_rid();
}
::google::protobuf::uint32 ReconnectReq::rid() const {
  // @@protoc_insertion_point(field_get:room.ReconnectReq.rid)
  return rid_;
}
void ReconnectReq::set_rid(::google::protobuf::uint32 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:room.ReconnectReq.rid)
}

// required uint32 uid = 2;
bool ReconnectReq::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReconnectReq::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
void ReconnectReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReconnectReq::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
::google::protobuf::uint32 ReconnectReq::uid() const {
  // @@protoc_insertion_point(field_get:room.ReconnectReq.uid)
  return uid_;
}
void ReconnectReq::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:room.ReconnectReq.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReconnectResp::kResultFieldNumber;
const int ReconnectResp::kIndexFieldNumber;
const int ReconnectResp::kCurrentFieldNumber;
const int ReconnectResp::kLandlordFieldNumber;
const int ReconnectResp::kOtheridFieldNumber;
const int ReconnectResp::kCidFieldNumber;
const int ReconnectResp::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReconnectResp::ReconnectResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_room_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:room.ReconnectResp)
}
ReconnectResp::ReconnectResp(const ReconnectResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      otherid_(from.otherid_),
      cid_(from.cid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&result_) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:room.ReconnectResp)
}

void ReconnectResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&result_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&result_) + sizeof(state_));
}

ReconnectResp::~ReconnectResp() {
  // @@protoc_insertion_point(destructor:room.ReconnectResp)
  SharedDtor();
}

void ReconnectResp::SharedDtor() {
}

void ReconnectResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReconnectResp::descriptor() {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReconnectResp& ReconnectResp::default_instance() {
  protobuf_room_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReconnectResp* ReconnectResp::New(::google::protobuf::Arena* arena) const {
  ReconnectResp* n = new ReconnectResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReconnectResp::Clear() {
// @@protoc_insertion_point(message_clear_start:room.ReconnectResp)
  otherid_.Clear();
  cid_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&result_, 0, reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&result_) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReconnectResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:room.ReconnectResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .base.ERROR_CODE result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::base::ERROR_CODE_IsValid(value)) {
            set_result(static_cast< ::base::ERROR_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 current = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_current();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 landlord = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_landlord();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &landlord_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 otherid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_otherid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_otherid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 cid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_cid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .room.ReconnectResp.PlayState state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::room::ReconnectResp_PlayState_IsValid(value)) {
            set_state(static_cast< ::room::ReconnectResp_PlayState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:room.ReconnectResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:room.ReconnectResp)
  return false;
#undef DO_
}

void ReconnectResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:room.ReconnectResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .base.ERROR_CODE result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // required uint32 index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // required uint32 current = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->current(), output);
  }

  // required uint32 landlord = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->landlord(), output);
  }

  // repeated uint32 otherid = 5;
  for (int i = 0, n = this->otherid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->otherid(i), output);
  }

  // repeated uint32 cid = 6;
  for (int i = 0, n = this->cid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->cid(i), output);
  }

  // required .room.ReconnectResp.PlayState state = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:room.ReconnectResp)
}

::google::protobuf::uint8* ReconnectResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:room.ReconnectResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .base.ERROR_CODE result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // required uint32 index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // required uint32 current = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->current(), target);
  }

  // required uint32 landlord = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->landlord(), target);
  }

  // repeated uint32 otherid = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->otherid_, target);

  // repeated uint32 cid = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->cid_, target);

  // required .room.ReconnectResp.PlayState state = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:room.ReconnectResp)
  return target;
}

size_t ReconnectResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:room.ReconnectResp)
  size_t total_size = 0;

  if (has_result()) {
    // required .base.ERROR_CODE result = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  if (has_index()) {
    // required uint32 index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  if (has_current()) {
    // required uint32 current = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->current());
  }

  if (has_landlord()) {
    // required uint32 landlord = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->landlord());
  }

  if (has_state()) {
    // required .room.ReconnectResp.PlayState state = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  return total_size;
}
size_t ReconnectResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:room.ReconnectResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .base.ERROR_CODE result = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());

    // required uint32 index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());

    // required uint32 current = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->current());

    // required uint32 landlord = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->landlord());

    // required .room.ReconnectResp.PlayState state = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 otherid = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->otherid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->otherid_size());
    total_size += data_size;
  }

  // repeated uint32 cid = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->cid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cid_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReconnectResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:room.ReconnectResp)
  GOOGLE_DCHECK_NE(&from, this);
  const ReconnectResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReconnectResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:room.ReconnectResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:room.ReconnectResp)
    MergeFrom(*source);
  }
}

void ReconnectResp::MergeFrom(const ReconnectResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:room.ReconnectResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  otherid_.MergeFrom(from.otherid_);
  cid_.MergeFrom(from.cid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000004u) {
      current_ = from.current_;
    }
    if (cached_has_bits & 0x00000008u) {
      landlord_ = from.landlord_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReconnectResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:room.ReconnectResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconnectResp::CopyFrom(const ReconnectResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:room.ReconnectResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconnectResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void ReconnectResp::Swap(ReconnectResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReconnectResp::InternalSwap(ReconnectResp* other) {
  otherid_.InternalSwap(&other->otherid_);
  cid_.InternalSwap(&other->cid_);
  std::swap(result_, other->result_);
  std::swap(index_, other->index_);
  std::swap(current_, other->current_);
  std::swap(landlord_, other->landlord_);
  std::swap(state_, other->state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReconnectResp::GetMetadata() const {
  protobuf_room_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_room_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReconnectResp

// required .base.ERROR_CODE result = 1;
bool ReconnectResp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReconnectResp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void ReconnectResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReconnectResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
::base::ERROR_CODE ReconnectResp::result() const {
  // @@protoc_insertion_point(field_get:room.ReconnectResp.result)
  return static_cast< ::base::ERROR_CODE >(result_);
}
void ReconnectResp::set_result(::base::ERROR_CODE value) {
  assert(::base::ERROR_CODE_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:room.ReconnectResp.result)
}

// required uint32 index = 2;
bool ReconnectResp::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReconnectResp::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
void ReconnectResp::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReconnectResp::clear_index() {
  index_ = 0u;
  clear_has_index();
}
::google::protobuf::uint32 ReconnectResp::index() const {
  // @@protoc_insertion_point(field_get:room.ReconnectResp.index)
  return index_;
}
void ReconnectResp::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:room.ReconnectResp.index)
}

// required uint32 current = 3;
bool ReconnectResp::has_current() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReconnectResp::set_has_current() {
  _has_bits_[0] |= 0x00000004u;
}
void ReconnectResp::clear_has_current() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReconnectResp::clear_current() {
  current_ = 0u;
  clear_has_current();
}
::google::protobuf::uint32 ReconnectResp::current() const {
  // @@protoc_insertion_point(field_get:room.ReconnectResp.current)
  return current_;
}
void ReconnectResp::set_current(::google::protobuf::uint32 value) {
  set_has_current();
  current_ = value;
  // @@protoc_insertion_point(field_set:room.ReconnectResp.current)
}

// required uint32 landlord = 4;
bool ReconnectResp::has_landlord() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReconnectResp::set_has_landlord() {
  _has_bits_[0] |= 0x00000008u;
}
void ReconnectResp::clear_has_landlord() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReconnectResp::clear_landlord() {
  landlord_ = 0u;
  clear_has_landlord();
}
::google::protobuf::uint32 ReconnectResp::landlord() const {
  // @@protoc_insertion_point(field_get:room.ReconnectResp.landlord)
  return landlord_;
}
void ReconnectResp::set_landlord(::google::protobuf::uint32 value) {
  set_has_landlord();
  landlord_ = value;
  // @@protoc_insertion_point(field_set:room.ReconnectResp.landlord)
}

// repeated uint32 otherid = 5;
int ReconnectResp::otherid_size() const {
  return otherid_.size();
}
void ReconnectResp::clear_otherid() {
  otherid_.Clear();
}
::google::protobuf::uint32 ReconnectResp::otherid(int index) const {
  // @@protoc_insertion_point(field_get:room.ReconnectResp.otherid)
  return otherid_.Get(index);
}
void ReconnectResp::set_otherid(int index, ::google::protobuf::uint32 value) {
  otherid_.Set(index, value);
  // @@protoc_insertion_point(field_set:room.ReconnectResp.otherid)
}
void ReconnectResp::add_otherid(::google::protobuf::uint32 value) {
  otherid_.Add(value);
  // @@protoc_insertion_point(field_add:room.ReconnectResp.otherid)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ReconnectResp::otherid() const {
  // @@protoc_insertion_point(field_list:room.ReconnectResp.otherid)
  return otherid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ReconnectResp::mutable_otherid() {
  // @@protoc_insertion_point(field_mutable_list:room.ReconnectResp.otherid)
  return &otherid_;
}

// repeated uint32 cid = 6;
int ReconnectResp::cid_size() const {
  return cid_.size();
}
void ReconnectResp::clear_cid() {
  cid_.Clear();
}
::google::protobuf::uint32 ReconnectResp::cid(int index) const {
  // @@protoc_insertion_point(field_get:room.ReconnectResp.cid)
  return cid_.Get(index);
}
void ReconnectResp::set_cid(int index, ::google::protobuf::uint32 value) {
  cid_.Set(index, value);
  // @@protoc_insertion_point(field_set:room.ReconnectResp.cid)
}
void ReconnectResp::add_cid(::google::protobuf::uint32 value) {
  cid_.Add(value);
  // @@protoc_insertion_point(field_add:room.ReconnectResp.cid)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ReconnectResp::cid() const {
  // @@protoc_insertion_point(field_list:room.ReconnectResp.cid)
  return cid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ReconnectResp::mutable_cid() {
  // @@protoc_insertion_point(field_mutable_list:room.ReconnectResp.cid)
  return &cid_;
}

// required .room.ReconnectResp.PlayState state = 7;
bool ReconnectResp::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ReconnectResp::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
void ReconnectResp::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
void ReconnectResp::clear_state() {
  state_ = 0;
  clear_has_state();
}
::room::ReconnectResp_PlayState ReconnectResp::state() const {
  // @@protoc_insertion_point(field_get:room.ReconnectResp.state)
  return static_cast< ::room::ReconnectResp_PlayState >(state_);
}
void ReconnectResp::set_state(::room::ReconnectResp_PlayState value) {
  assert(::room::ReconnectResp_PlayState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:room.ReconnectResp.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace room

// @@protoc_insertion_point(global_scope)
