// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef PROTOBUF_user_2eproto__INCLUDED
#define PROTOBUF_user_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)
namespace base {
class ErrorCode;
class ErrorCodeDefaultTypeInternal;
extern ErrorCodeDefaultTypeInternal _ErrorCode_default_instance_;
class HeartBeat;
class HeartBeatDefaultTypeInternal;
extern HeartBeatDefaultTypeInternal _HeartBeat_default_instance_;
class HeartBeatAck;
class HeartBeatAckDefaultTypeInternal;
extern HeartBeatAckDefaultTypeInternal _HeartBeatAck_default_instance_;
}  // namespace base
namespace user {
class LoginReq;
class LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class LoginResp;
class LoginRespDefaultTypeInternal;
extern LoginRespDefaultTypeInternal _LoginResp_default_instance_;
class LogoutReq;
class LogoutReqDefaultTypeInternal;
extern LogoutReqDefaultTypeInternal _LogoutReq_default_instance_;
class Player;
class PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class RegisterResp;
class RegisterRespDefaultTypeInternal;
extern RegisterRespDefaultTypeInternal _RegisterResp_default_instance_;
}  // namespace user

namespace user {

namespace protobuf_user_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_user_2eproto

enum Player_SexType {
  Player_SexType_MALE = 0,
  Player_SexType_FEMALE = 1
};
bool Player_SexType_IsValid(int value);
const Player_SexType Player_SexType_SexType_MIN = Player_SexType_MALE;
const Player_SexType Player_SexType_SexType_MAX = Player_SexType_FEMALE;
const int Player_SexType_SexType_ARRAYSIZE = Player_SexType_SexType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Player_SexType_descriptor();
inline const ::std::string& Player_SexType_Name(Player_SexType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Player_SexType_descriptor(), value);
}
inline bool Player_SexType_Parse(
    const ::std::string& name, Player_SexType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Player_SexType>(
    Player_SexType_descriptor(), name, value);
}
enum UserStatus {
  OFFLINE = 0,
  ONLINE = 1,
  FORBIDDEN = 2
};
bool UserStatus_IsValid(int value);
const UserStatus UserStatus_MIN = OFFLINE;
const UserStatus UserStatus_MAX = FORBIDDEN;
const int UserStatus_ARRAYSIZE = UserStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserStatus_descriptor();
inline const ::std::string& UserStatus_Name(UserStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserStatus_descriptor(), value);
}
inline bool UserStatus_Parse(
    const ::std::string& name, UserStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserStatus>(
    UserStatus_descriptor(), name, value);
}
// ===================================================================

class LoginReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:user.LoginReq) */ {
 public:
  LoginReq();
  virtual ~LoginReq();

  LoginReq(const LoginReq& from);

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginReq& default_instance();

  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LoginReq* other);

  // implements Message ----------------------------------------------

  inline LoginReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes account = 1;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // required bytes password = 2;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional bytes verifyCode = 3;
  bool has_verifycode() const;
  void clear_verifycode();
  static const int kVerifyCodeFieldNumber = 3;
  const ::std::string& verifycode() const;
  void set_verifycode(const ::std::string& value);
  #if LANG_CXX11
  void set_verifycode(::std::string&& value);
  #endif
  void set_verifycode(const char* value);
  void set_verifycode(const void* value, size_t size);
  ::std::string* mutable_verifycode();
  ::std::string* release_verifycode();
  void set_allocated_verifycode(::std::string* verifycode);

  // @@protoc_insertion_point(class_scope:user.LoginReq)
 private:
  void set_has_account();
  void clear_has_account();
  void set_has_password();
  void clear_has_password();
  void set_has_verifycode();
  void clear_has_verifycode();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr verifycode_;
  friend struct protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:user.LoginResp) */ {
 public:
  LoginResp();
  virtual ~LoginResp();

  LoginResp(const LoginResp& from);

  inline LoginResp& operator=(const LoginResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResp& default_instance();

  static inline const LoginResp* internal_default_instance() {
    return reinterpret_cast<const LoginResp*>(
               &_LoginResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LoginResp* other);

  // implements Message ----------------------------------------------

  inline LoginResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginResp& from);
  void MergeFrom(const LoginResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes desc = 2;
  bool has_desc() const;
  void clear_desc();
  static const int kDescFieldNumber = 2;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const void* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // optional bytes account = 4;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 4;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // required .base.ERROR_CODE code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::base::ERROR_CODE code() const;
  void set_code(::base::ERROR_CODE value);

  // optional uint32 id = 3;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:user.LoginResp)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_desc();
  void clear_has_desc();
  void set_has_id();
  void clear_has_id();
  void set_has_account();
  void clear_has_account();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  int code_;
  ::google::protobuf::uint32 id_;
  friend struct protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogoutReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:user.LogoutReq) */ {
 public:
  LogoutReq();
  virtual ~LogoutReq();

  LogoutReq(const LogoutReq& from);

  inline LogoutReq& operator=(const LogoutReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutReq& default_instance();

  static inline const LogoutReq* internal_default_instance() {
    return reinterpret_cast<const LogoutReq*>(
               &_LogoutReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(LogoutReq* other);

  // implements Message ----------------------------------------------

  inline LogoutReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LogoutReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogoutReq& from);
  void MergeFrom(const LogoutReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogoutReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes account = 2;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:user.LogoutReq)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_account();
  void clear_has_account();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::uint32 id_;
  friend struct protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:user.Player) */ {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();

  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Player* other);

  // implements Message ----------------------------------------------

  inline Player* New() const PROTOBUF_FINAL { return New(NULL); }

  Player* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Player_SexType SexType;
  static const SexType MALE =
    Player_SexType_MALE;
  static const SexType FEMALE =
    Player_SexType_FEMALE;
  static inline bool SexType_IsValid(int value) {
    return Player_SexType_IsValid(value);
  }
  static const SexType SexType_MIN =
    Player_SexType_SexType_MIN;
  static const SexType SexType_MAX =
    Player_SexType_SexType_MAX;
  static const int SexType_ARRAYSIZE =
    Player_SexType_SexType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SexType_descriptor() {
    return Player_SexType_descriptor();
  }
  static inline const ::std::string& SexType_Name(SexType value) {
    return Player_SexType_Name(value);
  }
  static inline bool SexType_Parse(const ::std::string& name,
      SexType* value) {
    return Player_SexType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bytes account = 2;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // required bytes password = 3;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // required bytes name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required uint32 id = 1 [default = 0];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional .user.Player.SexType sex = 6 [default = MALE];
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 6;
  ::user::Player_SexType sex() const;
  void set_sex(::user::Player_SexType value);

  // optional .user.UserStatus status = 7;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 7;
  ::user::UserStatus status() const;
  void set_status(::user::UserStatus value);

  // optional int32 money = 8;
  bool has_money() const;
  void clear_money();
  static const int kMoneyFieldNumber = 8;
  ::google::protobuf::int32 money() const;
  void set_money(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:user.Player)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_account();
  void clear_has_account();
  void set_has_password();
  void clear_has_password();
  void set_has_name();
  void clear_has_name();
  void set_has_sex();
  void clear_has_sex();
  void set_has_status();
  void clear_has_status();
  void set_has_money();
  void clear_has_money();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 id_;
  int sex_;
  int status_;
  ::google::protobuf::int32 money_;
  friend struct protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisterResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:user.RegisterResp) */ {
 public:
  RegisterResp();
  virtual ~RegisterResp();

  RegisterResp(const RegisterResp& from);

  inline RegisterResp& operator=(const RegisterResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterResp& default_instance();

  static inline const RegisterResp* internal_default_instance() {
    return reinterpret_cast<const RegisterResp*>(
               &_RegisterResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(RegisterResp* other);

  // implements Message ----------------------------------------------

  inline RegisterResp* New() const PROTOBUF_FINAL { return New(NULL); }

  RegisterResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegisterResp& from);
  void MergeFrom(const RegisterResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegisterResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes desc = 2;
  bool has_desc() const;
  void clear_desc();
  static const int kDescFieldNumber = 2;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const void* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // required .base.ERROR_CODE code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::base::ERROR_CODE code() const;
  void set_code(::base::ERROR_CODE value);

  // @@protoc_insertion_point(class_scope:user.RegisterResp)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_desc();
  void clear_has_desc();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  int code_;
  friend struct protobuf_user_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginReq

// required bytes account = 1;
inline bool LoginReq::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginReq::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginReq::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginReq::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& LoginReq::account() const {
  // @@protoc_insertion_point(field_get:user.LoginReq.account)
  return account_.GetNoArena();
}
inline void LoginReq::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:user.LoginReq.account)
}
#if LANG_CXX11
inline void LoginReq::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user.LoginReq.account)
}
#endif
inline void LoginReq::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user.LoginReq.account)
}
inline void LoginReq::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user.LoginReq.account)
}
inline ::std::string* LoginReq::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:user.LoginReq.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginReq::release_account() {
  // @@protoc_insertion_point(field_release:user.LoginReq.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:user.LoginReq.account)
}

// required bytes password = 2;
inline bool LoginReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginReq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& LoginReq::password() const {
  // @@protoc_insertion_point(field_get:user.LoginReq.password)
  return password_.GetNoArena();
}
inline void LoginReq::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:user.LoginReq.password)
}
#if LANG_CXX11
inline void LoginReq::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user.LoginReq.password)
}
#endif
inline void LoginReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user.LoginReq.password)
}
inline void LoginReq::set_password(const void* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user.LoginReq.password)
}
inline ::std::string* LoginReq::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:user.LoginReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginReq::release_password() {
  // @@protoc_insertion_point(field_release:user.LoginReq.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:user.LoginReq.password)
}

// optional bytes verifyCode = 3;
inline bool LoginReq::has_verifycode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginReq::set_has_verifycode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginReq::clear_has_verifycode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginReq::clear_verifycode() {
  verifycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifycode();
}
inline const ::std::string& LoginReq::verifycode() const {
  // @@protoc_insertion_point(field_get:user.LoginReq.verifyCode)
  return verifycode_.GetNoArena();
}
inline void LoginReq::set_verifycode(const ::std::string& value) {
  set_has_verifycode();
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:user.LoginReq.verifyCode)
}
#if LANG_CXX11
inline void LoginReq::set_verifycode(::std::string&& value) {
  set_has_verifycode();
  verifycode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user.LoginReq.verifyCode)
}
#endif
inline void LoginReq::set_verifycode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifycode();
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user.LoginReq.verifyCode)
}
inline void LoginReq::set_verifycode(const void* value, size_t size) {
  set_has_verifycode();
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user.LoginReq.verifyCode)
}
inline ::std::string* LoginReq::mutable_verifycode() {
  set_has_verifycode();
  // @@protoc_insertion_point(field_mutable:user.LoginReq.verifyCode)
  return verifycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginReq::release_verifycode() {
  // @@protoc_insertion_point(field_release:user.LoginReq.verifyCode)
  clear_has_verifycode();
  return verifycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_verifycode(::std::string* verifycode) {
  if (verifycode != NULL) {
    set_has_verifycode();
  } else {
    clear_has_verifycode();
  }
  verifycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifycode);
  // @@protoc_insertion_point(field_set_allocated:user.LoginReq.verifyCode)
}

// -------------------------------------------------------------------

// LoginResp

// required .base.ERROR_CODE code = 1;
inline bool LoginResp::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginResp::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginResp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::base::ERROR_CODE LoginResp::code() const {
  // @@protoc_insertion_point(field_get:user.LoginResp.code)
  return static_cast< ::base::ERROR_CODE >(code_);
}
inline void LoginResp::set_code(::base::ERROR_CODE value) {
  assert(::base::ERROR_CODE_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:user.LoginResp.code)
}

// optional bytes desc = 2;
inline bool LoginResp::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResp::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResp::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResp::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
inline const ::std::string& LoginResp::desc() const {
  // @@protoc_insertion_point(field_get:user.LoginResp.desc)
  return desc_.GetNoArena();
}
inline void LoginResp::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:user.LoginResp.desc)
}
#if LANG_CXX11
inline void LoginResp::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user.LoginResp.desc)
}
#endif
inline void LoginResp::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user.LoginResp.desc)
}
inline void LoginResp::set_desc(const void* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user.LoginResp.desc)
}
inline ::std::string* LoginResp::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:user.LoginResp.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginResp::release_desc() {
  // @@protoc_insertion_point(field_release:user.LoginResp.desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResp::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:user.LoginResp.desc)
}

// optional uint32 id = 3;
inline bool LoginResp::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginResp::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginResp::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginResp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 LoginResp::id() const {
  // @@protoc_insertion_point(field_get:user.LoginResp.id)
  return id_;
}
inline void LoginResp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:user.LoginResp.id)
}

// optional bytes account = 4;
inline bool LoginResp::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResp::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResp::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResp::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& LoginResp::account() const {
  // @@protoc_insertion_point(field_get:user.LoginResp.account)
  return account_.GetNoArena();
}
inline void LoginResp::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:user.LoginResp.account)
}
#if LANG_CXX11
inline void LoginResp::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user.LoginResp.account)
}
#endif
inline void LoginResp::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user.LoginResp.account)
}
inline void LoginResp::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user.LoginResp.account)
}
inline ::std::string* LoginResp::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:user.LoginResp.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginResp::release_account() {
  // @@protoc_insertion_point(field_release:user.LoginResp.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResp::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:user.LoginResp.account)
}

// -------------------------------------------------------------------

// LogoutReq

// required uint32 id = 1;
inline bool LogoutReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogoutReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogoutReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogoutReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 LogoutReq::id() const {
  // @@protoc_insertion_point(field_get:user.LogoutReq.id)
  return id_;
}
inline void LogoutReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:user.LogoutReq.id)
}

// required bytes account = 2;
inline bool LogoutReq::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogoutReq::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogoutReq::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogoutReq::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& LogoutReq::account() const {
  // @@protoc_insertion_point(field_get:user.LogoutReq.account)
  return account_.GetNoArena();
}
inline void LogoutReq::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:user.LogoutReq.account)
}
#if LANG_CXX11
inline void LogoutReq::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user.LogoutReq.account)
}
#endif
inline void LogoutReq::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user.LogoutReq.account)
}
inline void LogoutReq::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user.LogoutReq.account)
}
inline ::std::string* LogoutReq::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:user.LogoutReq.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogoutReq::release_account() {
  // @@protoc_insertion_point(field_release:user.LogoutReq.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutReq::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:user.LogoutReq.account)
}

// -------------------------------------------------------------------

// Player

// required uint32 id = 1 [default = 0];
inline bool Player::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Player::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Player::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Player::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Player::id() const {
  // @@protoc_insertion_point(field_get:user.Player.id)
  return id_;
}
inline void Player::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:user.Player.id)
}

// required bytes account = 2;
inline bool Player::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Player::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Player::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Player::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& Player::account() const {
  // @@protoc_insertion_point(field_get:user.Player.account)
  return account_.GetNoArena();
}
inline void Player::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:user.Player.account)
}
#if LANG_CXX11
inline void Player::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user.Player.account)
}
#endif
inline void Player::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user.Player.account)
}
inline void Player::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user.Player.account)
}
inline ::std::string* Player::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:user.Player.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Player::release_account() {
  // @@protoc_insertion_point(field_release:user.Player.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:user.Player.account)
}

// required bytes password = 3;
inline bool Player::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Player::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Player::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Player::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& Player::password() const {
  // @@protoc_insertion_point(field_get:user.Player.password)
  return password_.GetNoArena();
}
inline void Player::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:user.Player.password)
}
#if LANG_CXX11
inline void Player::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user.Player.password)
}
#endif
inline void Player::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user.Player.password)
}
inline void Player::set_password(const void* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user.Player.password)
}
inline ::std::string* Player::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:user.Player.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Player::release_password() {
  // @@protoc_insertion_point(field_release:user.Player.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:user.Player.password)
}

// required bytes name = 4;
inline bool Player::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Player::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Player::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Player::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:user.Player.name)
  return name_.GetNoArena();
}
inline void Player::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:user.Player.name)
}
#if LANG_CXX11
inline void Player::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user.Player.name)
}
#endif
inline void Player::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user.Player.name)
}
inline void Player::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user.Player.name)
}
inline ::std::string* Player::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:user.Player.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Player::release_name() {
  // @@protoc_insertion_point(field_release:user.Player.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:user.Player.name)
}

// optional .user.Player.SexType sex = 6 [default = MALE];
inline bool Player::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Player::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Player::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Player::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::user::Player_SexType Player::sex() const {
  // @@protoc_insertion_point(field_get:user.Player.sex)
  return static_cast< ::user::Player_SexType >(sex_);
}
inline void Player::set_sex(::user::Player_SexType value) {
  assert(::user::Player_SexType_IsValid(value));
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:user.Player.sex)
}

// optional .user.UserStatus status = 7;
inline bool Player::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Player::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Player::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Player::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::user::UserStatus Player::status() const {
  // @@protoc_insertion_point(field_get:user.Player.status)
  return static_cast< ::user::UserStatus >(status_);
}
inline void Player::set_status(::user::UserStatus value) {
  assert(::user::UserStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:user.Player.status)
}

// optional int32 money = 8;
inline bool Player::has_money() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Player::set_has_money() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Player::clear_has_money() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Player::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 Player::money() const {
  // @@protoc_insertion_point(field_get:user.Player.money)
  return money_;
}
inline void Player::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:user.Player.money)
}

// -------------------------------------------------------------------

// RegisterResp

// required .base.ERROR_CODE code = 1;
inline bool RegisterResp::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterResp::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterResp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::base::ERROR_CODE RegisterResp::code() const {
  // @@protoc_insertion_point(field_get:user.RegisterResp.code)
  return static_cast< ::base::ERROR_CODE >(code_);
}
inline void RegisterResp::set_code(::base::ERROR_CODE value) {
  assert(::base::ERROR_CODE_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:user.RegisterResp.code)
}

// required bytes desc = 2;
inline bool RegisterResp::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterResp::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterResp::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterResp::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
inline const ::std::string& RegisterResp::desc() const {
  // @@protoc_insertion_point(field_get:user.RegisterResp.desc)
  return desc_.GetNoArena();
}
inline void RegisterResp::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:user.RegisterResp.desc)
}
#if LANG_CXX11
inline void RegisterResp::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user.RegisterResp.desc)
}
#endif
inline void RegisterResp::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user.RegisterResp.desc)
}
inline void RegisterResp::set_desc(const void* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user.RegisterResp.desc)
}
inline ::std::string* RegisterResp::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:user.RegisterResp.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterResp::release_desc() {
  // @@protoc_insertion_point(field_release:user.RegisterResp.desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterResp::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:user.RegisterResp.desc)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace user

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::user::Player_SexType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::user::Player_SexType>() {
  return ::user::Player_SexType_descriptor();
}
template <> struct is_proto_enum< ::user::UserStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::user::UserStatus>() {
  return ::user::UserStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_user_2eproto__INCLUDED
